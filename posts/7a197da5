<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1.0,viewport-fit=cover"><title>SpringMVC执行原理 | yww</title><meta name="author" content="yww"><meta name="copyright" content="yww"><meta name="format-detection" content="telephone=no"><meta name="theme-color" content="#ffffff"><meta name="description" content="SpringMVC的执行原理">
<meta property="og:type" content="article">
<meta property="og:title" content="SpringMVC执行原理">
<meta property="og:url" content="https://yww52.com/posts/7a197da5">
<meta property="og:site_name" content="yww">
<meta property="og:description" content="SpringMVC的执行原理">
<meta property="og:locale" content="zh_CN">
<meta property="og:image" content="https://img.yww52.com/2020/9/2020-9-22/top_img.jpg">
<meta property="article:published_time" content="2020-09-21T16:00:00.000Z">
<meta property="article:modified_time" content="2025-07-18T09:57:30.190Z">
<meta property="article:author" content="yww">
<meta property="article:tag" content="yw,yww">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://img.yww52.com/2020/9/2020-9-22/top_img.jpg"><link rel="shortcut icon" href="/img/favicon.png"><link rel="canonical" href="https://yww52.com/posts/7a197da5"><link rel="preconnect" href="//cdn.jsdelivr.net"/><link rel="preconnect" href="//busuanzi.ibruce.info"/><link rel="stylesheet" href="/css/index.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css"><script>
    (() => {
      
    const saveToLocal = {
      set: (key, value, ttl) => {
        if (!ttl) return
        const expiry = Date.now() + ttl * 86400000
        localStorage.setItem(key, JSON.stringify({ value, expiry }))
      },
      get: key => {
        const itemStr = localStorage.getItem(key)
        if (!itemStr) return undefined
        const { value, expiry } = JSON.parse(itemStr)
        if (Date.now() > expiry) {
          localStorage.removeItem(key)
          return undefined
        }
        return value
      }
    }

    window.btf = {
      saveToLocal,
      getScript: (url, attr = {}) => new Promise((resolve, reject) => {
        const script = document.createElement('script')
        script.src = url
        script.async = true
        Object.entries(attr).forEach(([key, val]) => script.setAttribute(key, val))
        script.onload = script.onreadystatechange = () => {
          if (!script.readyState || /loaded|complete/.test(script.readyState)) resolve()
        }
        script.onerror = reject
        document.head.appendChild(script)
      }),
      getCSS: (url, id) => new Promise((resolve, reject) => {
        const link = document.createElement('link')
        link.rel = 'stylesheet'
        link.href = url
        if (id) link.id = id
        link.onload = link.onreadystatechange = () => {
          if (!link.readyState || /loaded|complete/.test(link.readyState)) resolve()
        }
        link.onerror = reject
        document.head.appendChild(link)
      }),
      addGlobalFn: (key, fn, name = false, parent = window) => {
        if (!false && key.startsWith('pjax')) return
        const globalFn = parent.globalFn || {}
        globalFn[key] = globalFn[key] || {}
        globalFn[key][name || Object.keys(globalFn[key]).length] = fn
        parent.globalFn = globalFn
      }
    }
  
      
      const activateDarkMode = () => {
        document.documentElement.setAttribute('data-theme', 'dark')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#0d0d0d')
        }
      }
      const activateLightMode = () => {
        document.documentElement.setAttribute('data-theme', 'light')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#ffffff')
        }
      }

      btf.activateDarkMode = activateDarkMode
      btf.activateLightMode = activateLightMode

      const theme = saveToLocal.get('theme')
    
          theme === 'dark' ? activateDarkMode() : theme === 'light' ? activateLightMode() : null
        
      
      const asideStatus = saveToLocal.get('aside-status')
      if (asideStatus !== undefined) {
        document.documentElement.classList.toggle('hide-aside', asideStatus === 'hide')
      }
    
      
    const detectApple = () => {
      if (/iPad|iPhone|iPod|Macintosh/.test(navigator.userAgent)) {
        document.documentElement.classList.add('apple')
      }
    }
    detectApple()
  
    })()
  </script><script>const GLOBAL_CONFIG = {
  root: '/',
  algolia: undefined,
  localSearch: undefined,
  translate: undefined,
  highlight: {"plugin":"highlight.js","highlightCopy":true,"highlightLang":true,"highlightHeightLimit":false,"highlightFullpage":false,"highlightMacStyle":false},
  copy: {
    success: '复制成功',
    error: '复制失败',
    noSupport: '浏览器不支持'
  },
  relativeDate: {
    homepage: false,
    post: false
  },
  runtime: '',
  dateSuffix: {
    just: '刚刚',
    min: '分钟前',
    hour: '小时前',
    day: '天前',
    month: '个月前'
  },
  copyright: undefined,
  lightbox: 'null',
  Snackbar: undefined,
  infinitegrid: {
    js: 'https://cdn.jsdelivr.net/npm/@egjs/infinitegrid/dist/infinitegrid.min.js',
    buttonText: '加载更多'
  },
  isPhotoFigcaption: false,
  islazyload: false,
  isAnchor: false,
  percent: {
    toc: true,
    rightside: false,
  },
  autoDarkmode: false
}</script><script id="config-diff">var GLOBAL_CONFIG_SITE = {
  title: 'SpringMVC执行原理',
  isPost: true,
  isHome: false,
  isHighlightShrink: false,
  isToc: true,
  isShuoshuo: false
}</script><!-- hexo injector head_end start --><link rel="stylesheet" href="https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css" media="defer" onload="this.media='all'"><link rel="stylesheet" href="https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css" media="defer" onload="this.media='all'"><script src="https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js"></script><!-- hexo injector head_end end --><meta name="generator" content="Hexo 7.3.0"></head><body><div class="post" id="body-wrap"><header class="post-bg" id="page-header" style="background-image: url(https://img.yww52.com/2020/9/2020-9-22/top_img.jpg);"><nav id="nav"><span id="blog-info"><a class="nav-site-title" href="/"><span class="site-name">yww</span></a><a class="nav-page-title" href="/"><span class="site-name">SpringMVC执行原理</span></a></span><div id="menus"></div></nav><div id="post-info"><h1 class="post-title">SpringMVC执行原理</h1><div id="post-meta"><div class="meta-firstline"><span class="post-meta-date"><i class="far fa-calendar-alt fa-fw post-meta-icon"></i><span class="post-meta-label">发表于</span><time class="post-meta-date-created" datetime="2020-09-21T16:00:00.000Z" title="发表于 2020-09-22 00:00:00">2020-09-22</time><span class="post-meta-separator">|</span><i class="fas fa-history fa-fw post-meta-icon"></i><span class="post-meta-label">更新于</span><time class="post-meta-date-updated" datetime="2025-07-18T09:57:30.190Z" title="更新于 2025-07-18 17:57:30">2025-07-18</time></span><span class="post-meta-categories"><span class="post-meta-separator">|</span><i class="fas fa-inbox fa-fw post-meta-icon"></i><a class="post-meta-categories" href="/categories/SSM/">SSM</a></span></div><div class="meta-secondline"><span class="post-meta-separator">|</span><span class="post-meta-pv-cv" id="" data-flag-title=""><i class="far fa-eye fa-fw post-meta-icon"></i><span class="post-meta-label">浏览量:</span><span id="busuanzi_value_page_pv"><i class="fa-solid fa-spinner fa-spin"></i></span></span></div></div></div></header><main class="layout" id="content-inner"><div id="post"><article class="container post-content" id="article-container"><h1 id="springmvc的组件"><a href="#springmvc的组件" class="headerlink" title="springmvc的组件"></a>springmvc的组件</h1><ol>
<li><p>前端控制器（DispatcherServlet）</p>
<p>前端控制器就是用来处理请求的中心，接收请求和响应结果都是由它控制的，也算是springmvc里的中心枢纽。</p>
</li>
<li><p>处理器映射器（HandlerMapping）</p>
<p>处理器映射器根据请求里的url来查找相应的处理器，即用来寻找处理器的。</p>
</li>
<li><p>处理器（Handler）</p>
<p>处理器是进行业务操作的。</p>
</li>
<li><p>处理器适配器（HandlerAdapter）</p>
<p>会把处理器包装成适配器，这样就可以支持多种类型的处理器，类比笔记本的适配器（适配器模式的应用）</p>
</li>
<li><p>视图解析器（ViewResovler）</p>
<p>即对返回来的视图进行解析，将代码解析成为对应的视图</p>
</li>
</ol>
<h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p><img src="https://img.yww52.com/2020/9/2020-9-22/img1.png" alt="工作流程"></p>
<h1 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h1><ol>
<li>用户发送请求，即在浏览器上输入url，DispatcherServlet会接收请求。</li>
<li>DispatcherServlet收到请求后就会调用HandlerMapping来寻找需要的Handler。</li>
<li>HandlerMapping找到Handler后就会返回给DispatcherServlet。</li>
<li>前端控制器DispatcherServlet收到Handler后就会调用HandlerAdapter对Handler进行处理。</li>
<li>HandlerAdapter经过适配调用具体的Handler(Controller，也叫后端控制器)。</li>
<li>执行完毕后就会将一个ModelAndView返回给HandlerAdapter。</li>
<li>HandlerAdapter将ModelAndView返回给DispatcherServlet。</li>
<li>DispatcherServlet将调用ViewReslover来解析这个ModelAndView。</li>
<li>ViewReslover解析ModelAndView后返回具体View给DispatcherServlet。</li>
<li>DispatcherServlet根据这个view就会渲染出所需要的页面。</li>
<li>DispatcherServlet将这个页面返回给用户，用户获取结果。</li>
</ol>
<h1 id="对于hellospringmvc的详解"><a href="#对于hellospringmvc的详解" class="headerlink" title="对于hellospringmvc的详解"></a>对于hellospringmvc的详解</h1><ol>
<li><p>首先在web.xml里注册的就是DispatcherServlet前端控制器，用户发出的请求（即输入url）先到的是这里。</p>
<div class="note info flat"><p>这里DispatcherServlet收到请求就会获取有用的信息，就是将url拆分。<br>就比如我输入的url，<a target="_blank" rel="noopener external nofollow noreferrer" href="https://localhost:8080/helloSpringmvc/hello">https://localhost:8080/helloSpringmvc/hello</a>    就会拆分为三部分</p>
<ol>
<li>localhost:8080，这是tomcat开放的端口。</li>
<li>helloSpringmvc，这个就是访问的你的项目名（可以自己更改），即tomcat的webapps下的helloSpringmvc文件夹。</li>
<li>hello，即为控制器的id ,发出请求输入ur就是为了找到这个控制器。</li>
</ol>
</div>
</li>
<li><p>然后经过关联的配置文件，即resource下的springmvc-servlet.xml。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--匹配到输入的url--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>springmvc-servlet.xml先是注册了HandlerMapping处理器映射器和HandlerAdapter处理器适配器，springmvc自动帮你调用这两个组件。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在springmvc-servlet.xml注册的Handler控制器,这样DispatcherServlet就可以通过这里找到这个hello控制器，然后DispatcherServlet将该控制器交给HandlerAdapter进行处理该Handler所包含的业务逻辑，这里就是HelloController类里的业务操作。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">             <span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.chen.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>HelloController中调用了Controller接口，即可以理解这就是mvc架构中Controller层，在这个类进行我们的业务逻辑操作，因为在springmvc中Control层的数据要交给DispatcherServlet处理的，所以返回了一个包装好的ModelAndView，Model存储数据，View存储视图。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    <span class="comment">//创建一个ModelAndView对象</span></span><br><span class="line">                    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">                    <span class="comment">//封装所需要的数据到ModelAndView的对象中</span></span><br><span class="line">                    mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">                    <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">                    mv.setViewName(<span class="string">&quot;hello&quot;</span>); 	<span class="comment">//   /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">                    <span class="keyword">return</span> mv;</span><br><span class="line">    		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>DispatcherServlet收到包装好的ModelAndView后，通过注册的视图解析器进行解析渲染视图。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="note info flat"><p>这里就是对控制器进行拼接，比如hello控制器，加上前缀与后缀就成为了/WEB-INF/jsp/hello.jsp，然后就会在web目录下找到该视图进行跳转。</p>
</div>
</li>
</ol>
<div class="note success flat"><p>结合springmvc中第一个springmvc程序来看。由此可以看出springmvc帮我们做了很多事情，我们只需要配置好那几个重要的组件，然后编写业务逻辑和视图就能完成对于一个控制器的工作。</p>
</div>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol>
<li><a target="_blank" rel="noopener external nofollow noreferrer" href="https://www.cnblogs.com/xiaoxi/p/6164383.html">https://www.cnblogs.com/xiaoxi/p/6164383.html</a></li>
</ol>
</article><div class="post-copyright"><div class="post-copyright__author"><span class="post-copyright-meta"><i class="fas fa-circle-user fa-fw"></i>文章作者: </span><span class="post-copyright-info"><a href="https://yww52.com">yww</a></span></div><div class="post-copyright__type"><span class="post-copyright-meta"><i class="fas fa-square-arrow-up-right fa-fw"></i>文章链接: </span><span class="post-copyright-info"><a href="https://yww52.com/posts/7a197da5">https://yww52.com/posts/7a197da5</a></span></div><div class="post-copyright__notice"><span class="post-copyright-meta"><i class="fas fa-circle-exclamation fa-fw"></i>版权声明: </span><span class="post-copyright-info">本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="external nofollow noreferrer" target="_blank">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来源 <a href="https://yww52.com" target="_blank">yww</a>！</span></div></div><div class="tag_share"><div class="post-share"><div class="social-share" data-image="https://img.yww52.com/2020/9/2020-9-22/top_img.jpg" data-sites="facebook,twitter,wechat,weibo,qq"></div><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/butterfly-extsrc/sharejs/dist/css/share.min.css" media="print" onload="this.media='all'"><script src="https://cdn.jsdelivr.net/npm/butterfly-extsrc/sharejs/dist/js/social-share.min.js" defer></script></div></div><nav class="pagination-post" id="pagination"><a class="pagination-related" href="/posts/16bca3f0" title="第十一届蓝桥杯第二次模拟赛"><div class="cover" style="background: var(--default-bg-color)"></div><div class="info"><div class="info-1"><div class="info-item-1">上一篇</div><div class="info-item-2">第十一届蓝桥杯第二次模拟赛</div></div><div class="info-2"><div class="info-item-1">...</div></div></div></a><a class="pagination-related" href="/posts/dcaabd92" title="IntelliJ IDEA的优化配置"><img class="cover" src="https://img.yww52.com/2020/7/2020-7-11/top_img.jpg" onerror="onerror=null;src='/img/404.jpg'" alt="cover of next post"><div class="info text-right"><div class="info-1"><div class="info-item-1">下一篇</div><div class="info-item-2">IntelliJ IDEA的优化配置</div></div><div class="info-2"><div class="info-item-1">前言闲着没事升级了一下我的idea，现在版本为2020.1.3，顺便记录一下idea的配置与优化，方便以后再改。 主题方面一个好的主题会让你喜欢上idea，所以可以去换一个喜欢的主题，体验超好。网上有很多去下载就好了，我就不放地址了。点击下载一般都会下一个jar包，随便找个地方放就好。 然后在idea里的File -&gt; Manage IDE settings -&gt; import settings,把jar包导进去重启就好了。 设置优化 idea主色配置File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; Appearance  这个看个人喜欢了，我用多了还是深色的好。   自动导包 File -&gt; Settings -&gt; Editor -&gt; General -&gt; Auto Import   这个就不用多说了吧，自动导包还是很方便的。   字体缩放File -&gt; Settings -&gt; Editor -&gt;...</div></div></div></a></nav></div><div class="aside-content" id="aside-content"><div class="card-widget card-info text-center"><div class="avatar-img"><img src="/img/butterfly-icon.png" onerror="this.onerror=null;this.src='/img/friend_404.gif'" alt="avatar"/></div><div class="author-info-name">yww</div><div class="author-info-description">debug myself</div><div class="site-data"><a href="/archives/"><div class="headline">文章</div><div class="length-num">72</div></a><a href="/tags/"><div class="headline">标签</div><div class="length-num">0</div></a><a href="/categories/"><div class="headline">分类</div><div class="length-num">16</div></a></div><a id="card-info-btn" target="_blank" rel="noopener external nofollow noreferrer" href="https://github.com/xxxxxx"><i class="fab fa-github"></i><span>Follow Me</span></a></div><div class="card-widget card-announcement"><div class="item-headline"><i class="fas fa-bullhorn fa-shake"></i><span>公告</span></div><div class="announcement_content">This is my Blog</div></div><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="fas fa-stream"></i><span>目录</span><span class="toc-percentage"></span></div><div class="toc-content"><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#springmvc%E7%9A%84%E7%BB%84%E4%BB%B6"><span class="toc-number">1.</span> <span class="toc-text">springmvc的组件</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B"><span class="toc-number">2.</span> <span class="toc-text">工作流程</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%85%B7%E4%BD%93%E5%88%86%E6%9E%90"><span class="toc-number">3.</span> <span class="toc-text">具体分析</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%AF%B9%E4%BA%8Ehellospringmvc%E7%9A%84%E8%AF%A6%E8%A7%A3"><span class="toc-number">4.</span> <span class="toc-text">对于hellospringmvc的详解</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"><span class="toc-number">5.</span> <span class="toc-text">参考文章</span></a></li></ol></div></div><div class="card-widget card-recent-post"><div class="item-headline"><i class="fas fa-history"></i><span>最新文章</span></div><div class="aside-list"><div class="aside-list-item"><a class="thumbnail" href="/posts/91f4854c" title="Java图片处理"><img src="https://img.yww52.com/2023/4/2023-4-18top_img.jpg" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="Java图片处理"/></a><div class="content"><a class="title" href="/posts/91f4854c" title="Java图片处理">Java图片处理</a><time datetime="2023-04-17T16:00:00.000Z" title="发表于 2023-04-18 00:00:00">2023-04-18</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/posts/58d09dd7" title="开发环境配置"><img src="https://img.yww52.com/2023/4/2023-4-11top_img.jpg" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="开发环境配置"/></a><div class="content"><a class="title" href="/posts/58d09dd7" title="开发环境配置">开发环境配置</a><time datetime="2023-04-10T16:00:00.000Z" title="发表于 2023-04-11 00:00:00">2023-04-11</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/posts/4e5ad84e" title="MybatisPlus常用方法"><img src="https://img.yww52.com/2023/2/2023-2-2top_img.jpg" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="MybatisPlus常用方法"/></a><div class="content"><a class="title" href="/posts/4e5ad84e" title="MybatisPlus常用方法">MybatisPlus常用方法</a><time datetime="2023-02-01T16:00:00.000Z" title="发表于 2023-02-02 00:00:00">2023-02-02</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/posts/622a5765" title="2022年度总结"><img src="https://img.yww52.com/2023/1/2023-1-1/top_img.jpg" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="2022年度总结"/></a><div class="content"><a class="title" href="/posts/622a5765" title="2022年度总结">2022年度总结</a><time datetime="2022-12-31T16:00:00.000Z" title="发表于 2023-01-01 00:00:00">2023-01-01</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/posts/e31003e0" title="SpringBoot部署启动"><img src="https://img.yww52.com/2022/09/2022-9-28top_img.jpg" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="SpringBoot部署启动"/></a><div class="content"><a class="title" href="/posts/e31003e0" title="SpringBoot部署启动">SpringBoot部署启动</a><time datetime="2022-09-27T16:00:00.000Z" title="发表于 2022-09-28 00:00:00">2022-09-28</time></div></div></div></div></div></div></main><footer id="footer"><div id="footer-wrap"><div class="copyright">&copy;2019 - 2025 By yww</div><div class="framework-info"><span>框架 </span><a target="_blank" rel="noopener external nofollow noreferrer" href="https://hexo.io">Hexo</a><span class="footer-separator">|</span><span>主题 </span><a target="_blank" rel="noopener external nofollow noreferrer" href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a></div></div></footer></div><div id="rightside"><div id="rightside-config-hide"><button id="readmode" type="button" title="阅读模式"><i class="fas fa-book-open"></i></button><button id="darkmode" type="button" title="日间和夜间模式切换"><i class="fas fa-adjust"></i></button><button id="hide-aside-btn" type="button" title="单栏和双栏切换"><i class="fas fa-arrows-alt-h"></i></button></div><div id="rightside-config-show"><button id="rightside-config" type="button" title="设置"><i class="fas fa-cog fa-spin"></i></button><button class="close" id="mobile-toc-button" type="button" title="目录"><i class="fas fa-list-ul"></i></button><button id="go-up" type="button" title="回到顶部"><span class="scroll-percent"></span><i class="fas fa-arrow-up"></i></button></div></div><div><script src="/js/utils.js"></script><script src="/js/main.js"></script><div class="js-pjax"></div><script async data-pjax src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script></div><!-- hexo injector body_end start --><script async src="//at.alicdn.com/t/font_2032782_8d5kxvn09md.js"></script><script data-pjax src="/live2d-models/index.min.js"></script><script>const oml2d = OML2D.loadOml2d({dockedPosition:"left",mobileDisplay:false,parentElement:document.body,primaryColor:"#d0c3fc",sayHello:true,models:[{"path":["/live2d-models/慕鸾/86.model3.json","/live2d-models/慕鸾婚服/116.model3.json","/live2d-models/小天使/qc.model3.json"],"name":"慕鸾","position":[-70,0],"scale":0.09,"stageStyle":{"width":250,"height":250},"mobilePosition":[-10,23],"mobileScale":0.1,"mobileStageStyle":{"width":180,"height":166},"motionPreloadStrategy":"ALL"}],menus:{disable:false},tips:{style: {"width":200,"height":110,"left":"calc(50% - 20px)","top":"-100px"},mobileStyle: {"width":180,"height":80,"left":"calc(50% - 30px)","top":"-100px"},idleTips:{interval:15000,message:["你好呀~","欢迎来到我的小站~"]}},statusBar:{"disable":false}});</script><!-- hexo injector body_end end --></body></html>