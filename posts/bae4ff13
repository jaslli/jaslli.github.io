<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1.0,viewport-fit=cover"><title>Redis | yww</title><meta name="author" content="yww"><meta name="copyright" content="yww"><meta name="format-detection" content="telephone=no"><meta name="theme-color" content="ffffff"><meta name="description" content="学习Redis的笔记">
<meta property="og:type" content="article">
<meta property="og:title" content="Redis">
<meta property="og:url" content="https://yww52.com/posts/bae4ff13">
<meta property="og:site_name" content="yww">
<meta property="og:description" content="学习Redis的笔记">
<meta property="og:locale" content="zh_CN">
<meta property="og:image" content="https://img.yww52.com/2021/2/2021-2-15/top_img.jpg">
<meta property="article:published_time" content="2021-02-14T16:00:00.000Z">
<meta property="article:modified_time" content="2024-11-12T08:45:36.500Z">
<meta property="article:author" content="yww">
<meta property="article:tag" content="yw,yww">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://img.yww52.com/2021/2/2021-2-15/top_img.jpg"><link rel="shortcut icon" href="/yww/img/favicon.jpeg"><link rel="canonical" href="https://yww52.com/posts/bae4ff13"><link rel="preconnect" href="//cdn.jsdelivr.net"/><link rel="preconnect" href="//hm.baidu.com"/><link rel="preconnect" href="//busuanzi.ibruce.info"/><link rel="stylesheet" href="/css/index.css"><link rel="stylesheet" href="https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/font-awesome/6.0.0/css/all.min.css"><link rel="stylesheet" href="https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/node-snackbar/0.1.16/snackbar.min.css" media="print" onload="this.media='all'"><script>
    (() => {
      
    const saveToLocal = {
      set: (key, value, ttl) => {
        if (!ttl) return
        const expiry = Date.now() + ttl * 86400000
        localStorage.setItem(key, JSON.stringify({ value, expiry }))
      },
      get: key => {
        const itemStr = localStorage.getItem(key)
        if (!itemStr) return undefined
        const { value, expiry } = JSON.parse(itemStr)
        if (Date.now() > expiry) {
          localStorage.removeItem(key)
          return undefined
        }
        return value
      }
    }

    window.btf = {
      saveToLocal,
      getScript: (url, attr = {}) => new Promise((resolve, reject) => {
        const script = document.createElement('script')
        script.src = url
        script.async = true
        Object.entries(attr).forEach(([key, val]) => script.setAttribute(key, val))
        script.onload = script.onreadystatechange = () => {
          if (!script.readyState || /loaded|complete/.test(script.readyState)) resolve()
        }
        script.onerror = reject
        document.head.appendChild(script)
      }),
      getCSS: (url, id) => new Promise((resolve, reject) => {
        const link = document.createElement('link')
        link.rel = 'stylesheet'
        link.href = url
        if (id) link.id = id
        link.onload = link.onreadystatechange = () => {
          if (!link.readyState || /loaded|complete/.test(link.readyState)) resolve()
        }
        link.onerror = reject
        document.head.appendChild(link)
      }),
      addGlobalFn: (key, fn, name = false, parent = window) => {
        if (!true && key.startsWith('pjax')) return
        const globalFn = parent.globalFn || {}
        globalFn[key] = globalFn[key] || {}
        globalFn[key][name || Object.keys(globalFn[key]).length] = fn
        parent.globalFn = globalFn
      }
    }
  
      
      const activateDarkMode = () => {
        document.documentElement.setAttribute('data-theme', 'dark')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#0d0d0d')
        }
      }
      const activateLightMode = () => {
        document.documentElement.setAttribute('data-theme', 'light')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', 'ffffff')
        }
      }

      btf.activateDarkMode = activateDarkMode
      btf.activateLightMode = activateLightMode

      const theme = saveToLocal.get('theme')
    
          theme === 'dark' ? activateDarkMode() : theme === 'light' ? activateLightMode() : null
        
      
      const asideStatus = saveToLocal.get('aside-status')
      if (asideStatus !== undefined) {
        document.documentElement.classList.toggle('hide-aside', asideStatus === 'hide')
      }
    
      
    const detectApple = () => {
      if (/iPad|iPhone|iPod|Macintosh/.test(navigator.userAgent)) {
        document.documentElement.classList.add('apple')
      }
    }
    detectApple()
  
    })()
  </script><script>var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?136a6aeed7736be835cf2e59b702bfd6";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
btf.addGlobalFn('pjaxComplete', () => {
  _hmt.push(['_trackPageview',window.location.pathname])
}, 'baidu_analytics')
</script><script>const GLOBAL_CONFIG = {
  root: '/',
  algolia: undefined,
  localSearch: {"path":"/search.xml","preload":true,"top_n_per_article":1,"unescape":false,"languages":{"hits_empty":"未找到符合您查询的内容：${query}","hits_stats":"共找到 ${hits} 篇文章"}},
  translate: undefined,
  highlight: {"plugin":"highlight.js","highlightCopy":true,"highlightLang":true,"highlightHeightLimit":300,"highlightFullpage":false,"highlightMacStyle":true},
  copy: {
    success: '复制成功',
    error: '复制失败',
    noSupport: '浏览器不支持'
  },
  relativeDate: {
    homepage: false,
    post: false
  },
  runtime: '',
  dateSuffix: {
    just: '刚刚',
    min: '分钟前',
    hour: '小时前',
    day: '天前',
    month: '个月前'
  },
  copyright: undefined,
  lightbox: 'null',
  Snackbar: {"chs_to_cht":"已切换为繁体中文","cht_to_chs":"已切换为简体中文","day_to_night":"已切换为深色模式","night_to_day":"已切换为浅色模式","bgLight":"#CD9DFA","bgDark":"#1f1f1f","position":"top-center"},
  infinitegrid: {
    js: 'https://cdn.jsdelivr.net/npm/@egjs/infinitegrid/dist/infinitegrid.min.js',
    buttonText: '加载更多'
  },
  isPhotoFigcaption: true,
  islazyload: true,
  isAnchor: false,
  percent: {
    toc: true,
    rightside: true,
  },
  autoDarkmode: false
}</script><script id="config-diff">var GLOBAL_CONFIG_SITE = {
  title: 'Redis',
  isPost: true,
  isHome: false,
  isHighlightShrink: false,
  isToc: true,
  isShuoshuo: false
}</script><script data-pjax charset="UTF-8" id="LA_COLLECT" src="/yww/scripts/js-sdk-pro.min.js"></script><script data-pjax>LA.init({id:"3H0GBfojNsZxwWln",ck:"3H0GBfojNsZxwWln"})</script><!-- hexo injector head_end start --><link rel="stylesheet" href="https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css" media="defer" onload="this.media='all'"><link rel="stylesheet" href="https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css" media="defer" onload="this.media='all'"><script src="https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js"></script><!-- hexo injector head_end end --><meta name="generator" content="Hexo 7.3.0"></head><body><script>window.paceOptions = {
  restartOnPushState: false
}

btf.addGlobalFn('pjaxSend', () => {
  Pace.restart()
}, 'pace_restart')

</script><link rel="stylesheet" href="/yww/styles/flash.css"/><script src="https://cdn.jsdelivr.net/npm/pace-js/pace.min.js"></script><div id="web_bg" style="background-color: #efefef;"></div><div id="sidebar"><div id="menu-mask"></div><div id="sidebar-menus"><div class="avatar-img text-center"><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/image/avatar.jpg" onerror="onerror=null;src='/yww/img/loading.gif'" alt="avatar"/></div><div class="site-data text-center"><a href="/archives/"><div class="headline">文章</div><div class="length-num">72</div></a><a href="/tags/"><div class="headline">标签</div><div class="length-num">0</div></a><a href="/categories/"><div class="headline">分类</div><div class="length-num">16</div></a></div><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><i class="fa-fw iconfont icon-home"></i><span> 首页</span></a></div><div class="menus_item"><a class="site-page" href="/archives/"><i class="fa-fw iconfont icon-archives"></i><span> 归档</span></a></div><div class="menus_item"><a class="site-page" href="/categories/"><i class="fa-fw iconfont icon-categories"></i><span> 分类</span></a></div><div class="menus_item"><a class="site-page" href="/link/"><i class="fa-fw iconfont icon-link"></i><span> 友链</span></a></div><div class="menus_item"><a class="site-page" href="/comment/"><i class="fa-fw iconfont icon-comment"></i><span> 留言页</span></a></div><div class="menus_item"><a class="site-page" href="/about/"><i class="fa-fw iconfont icon-about"></i><span> 关于</span></a></div></div></div></div><div class="post" id="body-wrap"><header class="post-bg" id="page-header" style="background-image: url(https://img.yww52.com/2021/2/2021-2-15/top_img.jpg);"><nav id="nav"><span id="blog-info"><a class="nav-site-title" href="/"><span class="site-name">yww</span></a><a class="nav-page-title" href="/"><span class="site-name">Redis</span></a></span><div id="menus"><div id="search-button"><span class="site-page social-icon search"><i class="fas fa-search fa-fw"></i><span> 搜索</span></span></div><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><i class="fa-fw iconfont icon-home"></i><span> 首页</span></a></div><div class="menus_item"><a class="site-page" href="/archives/"><i class="fa-fw iconfont icon-archives"></i><span> 归档</span></a></div><div class="menus_item"><a class="site-page" href="/categories/"><i class="fa-fw iconfont icon-categories"></i><span> 分类</span></a></div><div class="menus_item"><a class="site-page" href="/link/"><i class="fa-fw iconfont icon-link"></i><span> 友链</span></a></div><div class="menus_item"><a class="site-page" href="/comment/"><i class="fa-fw iconfont icon-comment"></i><span> 留言页</span></a></div><div class="menus_item"><a class="site-page" href="/about/"><i class="fa-fw iconfont icon-about"></i><span> 关于</span></a></div></div><div id="toggle-menu"><span class="site-page"><i class="fas fa-bars fa-fw"></i></span></div></div></nav><div id="post-info"><h1 class="post-title">Redis</h1><div id="post-meta"><div class="meta-firstline"><span class="post-meta-date"><i class="far fa-calendar-alt fa-fw post-meta-icon"></i><span class="post-meta-label">发表于</span><time class="post-meta-date-created" datetime="2021-02-14T16:00:00.000Z" title="发表于 2021-02-15 00:00:00">2021-02-15</time><span class="post-meta-separator">|</span><i class="fas fa-history fa-fw post-meta-icon"></i><span class="post-meta-label">更新于</span><time class="post-meta-date-updated" datetime="2024-11-12T08:45:36.500Z" title="更新于 2024-11-12 16:45:36">2024-11-12</time></span><span class="post-meta-categories"><span class="post-meta-separator">|</span><i class="fas fa-inbox fa-fw post-meta-icon"></i><a class="post-meta-categories" href="/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/">数据库</a></span></div><div class="meta-secondline"><span class="post-meta-separator">|</span><span class="post-meta-wordcount"><i class="far fa-file-word fa-fw post-meta-icon"></i><span class="post-meta-label">总字数:</span><span class="word-count">9k</span><span class="post-meta-separator">|</span><i class="far fa-clock fa-fw post-meta-icon"></i><span class="post-meta-label">阅读时长:</span><span>30分钟</span></span><span class="post-meta-separator">|</span><span class="post-meta-pv-cv" id="" data-flag-title=""><i class="far fa-eye fa-fw post-meta-icon"></i><span class="post-meta-label">浏览量:</span><span id="busuanzi_value_page_pv"><i class="fa-solid fa-spinner fa-spin"></i></span></span></div></div></div></header><main class="layout" id="content-inner"><div id="post"><article class="container post-content" id="article-container"><h1 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h1><p>先来看看百度百科对NoSQL的描述。</p>
<blockquote>
<p>NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。</p>
</blockquote>
<p>NoSQL维基百科称其为<code>Not Only SQL</code>,在当今的大数据年代，仅仅是关系型数据库已经不能满足当前一些流量较大的Web应用，所以NoSQL就应运而生，就是用来解决数据量较大的问题。</p>
<p>NoSQL可以分成四个大类。</p>
<ol>
<li><p>键值存储数据库</p>
</li>
<li><p>列存储数据库</p>
</li>
<li><p>文档型数据库</p>
</li>
<li><p>图形数据库</p>
</li>
</ol>
<p>这里我就用百度百科上的表格，来简单了解一下这四个分类。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">分类</th>
<th style="text-align:center">Examples举例</th>
<th style="text-align:center">典型应用场景</th>
<th style="text-align:center">数据模型</th>
<th style="text-align:center">优点</th>
<th style="text-align:center">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">键值存储数据库</td>
<td style="text-align:center">Tokyo Cabinet/Tyrant， Redis， Voldemort， Oracle BDB</td>
<td style="text-align:center">内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td>
<td style="text-align:center">Key 指向 Value 的键值对，通常用hash table来实现</td>
<td style="text-align:center">查找速度快</td>
<td style="text-align:center">数据无结构化，通常只被当作字符串或者二进制数据</td>
</tr>
<tr>
<td style="text-align:center">列存储数据库</td>
<td style="text-align:center">Cassandra， HBase， Riak</td>
<td style="text-align:center">分布式的文件系统</td>
<td style="text-align:center">以列簇式存储，将同一列数据存在一起</td>
<td style="text-align:center">查找速度快，可扩展性强，更容易进行分布式扩展</td>
<td style="text-align:center">功能相对局限</td>
</tr>
<tr>
<td style="text-align:center">文档型数据库</td>
<td style="text-align:center">CouchDB， MongoDb</td>
<td style="text-align:center">Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td>
<td style="text-align:center">Key-Value对应的键值对，Value为结构化数据</td>
<td style="text-align:center">数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td>
<td style="text-align:center">查询性能不高，而且缺乏统一的查询语法。</td>
</tr>
<tr>
<td style="text-align:center">图形(Graph)数据库</td>
<td style="text-align:center">Neo4J， InfoGrid， Infinite Graph</td>
<td style="text-align:center">社交网络，推荐系统等。专注于构建关系图谱</td>
<td style="text-align:center">图结构</td>
<td style="text-align:center">利用图结构相关算法。比如最短路径寻址，N度关系查找等</td>
<td style="text-align:center">很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案。</td>
</tr>
</tbody>
</table>
</div>
<p>这次学习的就是键值存储数据库中的Redis。</p>
<h1 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis"></a>什么是Redis</h1><p>Redis是<code>Remote Dictionary Server</code>的缩写，翻译为远程字典调用，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>
<ul>
<li><a target="_blank" rel="noopener external nofollow noreferrer" href="https://redis.io/">官网</a></li>
<li><a target="_blank" rel="noopener external nofollow noreferrer" href="https://github.com/redis/redis">Github</a></li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>windows的只需要下载他们提供的压缩包使用就好了。</p>
<p><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/2/2021-2-15/img1.png" alt=""></p>
<p>打开服务后就能看到服务的信息，默认端口为6379</p>
<p><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/2/2021-2-15/img2.png" alt=""></p>
<p>接下来来确认一下服务是否真的开启了，打开客户端，使用<code>ping</code>命令来测试，出现<code>PONG</code>表示已经连接到了Redis的服务。</p>
<p><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/2/2021-2-15/img3.png" alt=""></p>
<div class="tip info"><p>windows的版本活跃度很低，而且官网也不推荐使用windows，所以还是尽量使用Linux，之后的使用我也是使用Linux来测试。</p>
</div>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>去到redis的github就能下载到压缩包使用。</p>
<p>因为Redis是使用C/C++写的，所以要想使用，还是需要先安装一下C/C++的环境。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装环境</span></span><br><span class="line">	yum install gcc-c++</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">	make</span><br><span class="line">	make install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>要是make命令时出现了很多的error，大概率就是因为redis6版本是需要gcc版本是5以上的才行，所以需要先升级gcc的版本，这里是升级到了9。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    yum -y install centos-release-scl</span><br><span class="line">    yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils </span><br><span class="line">    scl <span class="built_in">enable</span> devtoolset-9 bash</span><br><span class="line"><span class="comment"># scl命令是临时启动，长期使用就需要配置环境</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt;/etc/profile</span><br></pre></td></tr></table></figure>
<p>Redis默认会安装到<code>/usr/local/bin</code>的目录里。</p>
<p>Redis不是默认启动的，为了方便学习，要设置成默认启动的，所以去修改<code>redis.conf</code>这个文件。</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将这个选项设置为yes,默认为no	</span><br><span class="line">	daemonize yes</span><br></pre></td></tr></table></figure>
<p>启动Redis的服务。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以哪个配置文件来启动redis的服务	</span></span><br><span class="line">	redis-server [conf的路径]</span><br><span class="line"><span class="comment"># 打开redis的客户端，连接6379端口</span></span><br><span class="line">	redis-cli -p 6379</span><br><span class="line"><span class="comment"># 出现PONG表示连通</span></span><br><span class="line">	ping</span><br></pre></td></tr></table></figure>
<p>关闭Redis的服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在客户端连接6379端口中</span></span><br><span class="line">	SHUTDOWN</span><br><span class="line"><span class="comment"># 退出客户端</span></span><br><span class="line">	<span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<h1 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h1><p>Redis的目录下还会有一个命令<code>redis-benchmark</code>。</p>
<p>这个命令是官方自带的性能测试的命令，用来测试Redis的一些基础命令读写的速度，以下是命令的参数。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">参数选项</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-h</td>
<td style="text-align:center">指定服务器主机名</td>
<td style="text-align:center">127.0.0.1</td>
</tr>
<tr>
<td style="text-align:center">-p</td>
<td style="text-align:center">指定服务器端口</td>
<td style="text-align:center">6379</td>
</tr>
<tr>
<td style="text-align:center">-s</td>
<td style="text-align:center">指定服务器 socket</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-c</td>
<td style="text-align:center">指定并发连接数</td>
<td style="text-align:center">50</td>
</tr>
<tr>
<td style="text-align:center">-n</td>
<td style="text-align:center">指定请求数</td>
<td style="text-align:center">10000</td>
</tr>
<tr>
<td style="text-align:center">-d</td>
<td style="text-align:center">以字节的形式指定 SET/GET 值的数据大小</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">-k</td>
<td style="text-align:center">1=keep alive 0=reconnect</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">-r</td>
<td style="text-align:center">SET/GET/INCR 使用随机 key, SADD 使用随机值</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-P</td>
<td style="text-align:center">通过管道传输 <numreq> 请求</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">-q</td>
<td style="text-align:center">强制退出 redis。仅显示 query/sec 值</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">—csv</td>
<td style="text-align:center">以 CSV 格式输出</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-l</td>
<td style="text-align:center">生成循环，永久执行测试</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-t</td>
<td style="text-align:center">仅运行以逗号分隔的测试命令列表</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-I</td>
<td style="text-align:center">Idle 模式。仅打开 N 个 idle 连接并等待。</td>
</tr>
</tbody>
</table>
</div>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>Redis支持的数据类型有很多，官网也写的很清楚了。</p>
<blockquote>
<p>Redis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams.</p>
</blockquote>
<h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h2><div class="tip info"><p>String一般使用是用来计数，比如用户的访问次数，热点文章的点击数，转发数等。</p>
</div>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 值为一个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置键值对</span></span><br><span class="line">	<span class="built_in">set</span> [key] [value]</span><br><span class="line"><span class="comment"># 获取值</span></span><br><span class="line">	get [key]</span><br><span class="line"><span class="comment"># 查看所有的键值对</span></span><br><span class="line">	keys *</span><br><span class="line"><span class="comment"># 切换数据库（redis默认16个数据库，从0开始）</span></span><br><span class="line">	<span class="keyword">select</span> [index]</span><br><span class="line"><span class="comment"># 清空数据库</span></span><br><span class="line">	flushdb	 <span class="comment"># 当前数据库</span></span><br><span class="line">	flushall <span class="comment"># 所有的数据库 </span></span><br><span class="line"><span class="comment"># 判断键值对是否存在</span></span><br><span class="line">	exists [key]</span><br><span class="line"><span class="comment"># 往值追加字符串</span></span><br><span class="line">	append [key] [value]</span><br><span class="line"><span class="comment"># 获取字符串的长度</span></span><br><span class="line">	strlen [key]</span><br><span class="line"><span class="comment"># 自增,注意该字符串是要是数字</span></span><br><span class="line">	incr [key]	<span class="comment"># 步长为1</span></span><br><span class="line">	incrby [key] [length]</span><br><span class="line"><span class="comment"># 自减</span></span><br><span class="line">	decr [key]</span><br><span class="line">	decrby [key] [length]</span><br><span class="line"><span class="comment"># 获取区间的值</span></span><br><span class="line">	getrange [key] [index1] [index2]</span><br><span class="line"><span class="comment"># 替换值,从第几个开始替换值</span></span><br><span class="line">	setrange [key] [index] [value]</span><br><span class="line"><span class="comment"># 给给定键设置过期时间</span></span><br><span class="line">	expire [key] [秒]</span><br><span class="line"><span class="comment"># 创建一个键值对并设置过期时间</span></span><br><span class="line">	setex [key] [秒] [value]</span><br><span class="line"><span class="comment"># 查看是否过期，负数表示已过期的时间</span></span><br><span class="line">	ttl [key]</span><br><span class="line"><span class="comment">#  如果不存在该键就设置键值对</span></span><br><span class="line">	setnx [key] [value]</span><br><span class="line"><span class="comment"># 批量创建键值对</span></span><br><span class="line">	mset [key1] [value1] [key2] [value3] ...</span><br><span class="line"><span class="comment"># 批量获取值</span></span><br><span class="line">	mget [key1] [key2] ...</span><br><span class="line"><span class="comment"># 批量创建键值对,原子操作，若是有一个键已经存在，那就全部都会创建失败</span></span><br><span class="line">	msetnx [key1] [value1] [key2] [value3] ...</span><br><span class="line"><span class="comment"># 先获取键值对在创建键值对</span></span><br><span class="line">	getset [key] [value]</span><br></pre></td></tr></table></figure>
<h2 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h2><div class="tip info"><p>List一般用来发布与订阅或者说消息队列、慢查询等场景。</p>
</div>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 值为类似一个双向的链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lpush表示从头部增加值，rpush从韦部增加值</span></span><br><span class="line">	lpush [key] [value]</span><br><span class="line">	rpush [key] [value]</span><br><span class="line"><span class="comment"># 获取列表中的值,从index1到index2区间获取值</span></span><br><span class="line">	lrange [key] [index1] [index2]</span><br><span class="line">	lrange [key] 0 -1 <span class="comment"># 表示查询列表所有值</span></span><br><span class="line"><span class="comment"># lpop移除第一个值，rpop移除最后一个值</span></span><br><span class="line">	lpop [key]</span><br><span class="line">	rpop [key]</span><br><span class="line"><span class="comment"># 按下标获取值</span></span><br><span class="line">	lindex [key] [index]</span><br><span class="line"><span class="comment"># 查询键的长度，即有多少个值</span></span><br><span class="line">	llen [key]</span><br><span class="line"><span class="comment"># 移除指定的值</span></span><br><span class="line">	lrem [key] [个数] [value]</span><br><span class="line"><span class="comment"># 截取列表,即修改列表中的值</span></span><br><span class="line">	ltrim [key] [index1] [index2]</span><br><span class="line"><span class="comment"># 移除列表最后一个值，移动到另一个列表中</span></span><br><span class="line">	rpoplpush [key1] [value] [key2]</span><br><span class="line"><span class="comment"># 替换列表中指定的值</span></span><br><span class="line">	lset [key] [index] [value]</span><br><span class="line"><span class="comment"># 判断列表是否存在</span></span><br><span class="line">	exists [key]</span><br><span class="line"><span class="comment"># 插入值</span></span><br><span class="line"><span class="comment"># 在列表的value1值的前面插入一个value2的值</span></span><br><span class="line">	linsert [key] before [value1] [value2]</span><br><span class="line"><span class="comment"># 在列表的value1值的后面插入一个value2的值</span></span><br><span class="line">	linsert [key] after [value1] [value2]	</span><br></pre></td></tr></table></figure>
<h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h2><div class="tip info"><p>Set的使用场景一般为，需要存放的数据不能重复以及需要获取多个数据源交集和并集等场景</p>
</div>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set不能重复添加相同的元素，类似于Java的HashSet，是一种无序集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 往集合中添加值</span></span><br><span class="line">	sadd [key] [value]</span><br><span class="line"><span class="comment"># 查看集合的所有值</span></span><br><span class="line">	smembers [key]</span><br><span class="line"><span class="comment"># 判断集合是否存在该元素</span></span><br><span class="line">	sismember [key] [value]</span><br><span class="line"><span class="comment"># 查看集合中元素的个数</span></span><br><span class="line">	scard [key]</span><br><span class="line"><span class="comment"># 移除指定元素</span></span><br><span class="line">	srem [key] [value]</span><br><span class="line"><span class="comment"># 随机抽选元素</span></span><br><span class="line">	srandmember [key] <span class="comment"># 默认一个</span></span><br><span class="line">	srandmember [key] [length]</span><br><span class="line"><span class="comment"># 随机移除一个元素</span></span><br><span class="line">	spop [key]</span><br><span class="line"><span class="comment"># 将一个元素移动到另一个集合</span></span><br><span class="line">	smove [key1] [value] [key2]</span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line">	sdiff [key1] [key2]</span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line">	sinter [key1] [key2]</span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line">	sunion [key1] [key2]</span><br></pre></td></tr></table></figure>
<h2 id="Hash-哈希"><a href="#Hash-哈希" class="headerlink" title="Hash(哈希)"></a>Hash(哈希)</h2><div class="tip info"><p>Hash一般是用来进行对象的存储</p>
</div>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hash的结构类似于Java8时候的HashMap</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个键值对</span></span><br><span class="line">	hset [key] [key1] [value1]</span><br><span class="line"><span class="comment"># 获取值</span></span><br><span class="line">	hget [key] [key1]</span><br><span class="line"><span class="comment"># 批量设置键值对</span></span><br><span class="line">	hmset [key] [key1] [value1] [key2] [value2]...</span><br><span class="line"><span class="comment"># 批量获取值</span></span><br><span class="line">	hmget [key] [key1] [key2]...</span><br><span class="line"><span class="comment"># 获取全部键值对	</span></span><br><span class="line">	hgetall [key]</span><br><span class="line"><span class="comment"># 删除指定键值对</span></span><br><span class="line">	hdel [key] [key1]</span><br><span class="line"><span class="comment"># 查看键值对的个数</span></span><br><span class="line">	hlen [key]</span><br><span class="line"><span class="comment"># 判断一个键值对是否存在</span></span><br><span class="line">	hexists [key] [key1]</span><br><span class="line"><span class="comment"># 获取所有的键</span></span><br><span class="line">	hkeys [key]</span><br><span class="line"><span class="comment"># 获取所有的值</span></span><br><span class="line">	hvals [key]</span><br><span class="line"><span class="comment"># 不存在可以创建</span></span><br><span class="line">	hsetnx [key] [key1] [value1]</span><br></pre></td></tr></table></figure>
<h2 id="Zset-有序的集合"><a href="#Zset-有序的集合" class="headerlink" title="Zset(有序的集合)"></a>Zset(有序的集合)</h2><div class="tip info"><p>Zset一般使用在那些需要排序的场景。比如礼物排行榜，弹幕消息等。</p>
</div>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Set的基础上增加了权重参数，从而可以通过权重来进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在指定位置增加值</span></span><br><span class="line">	zadd [key] [index] [value]</span><br><span class="line">	zadd [key] [index1] [value1] [index2] [value2]..</span><br><span class="line"><span class="comment"># 有顺序地显示区间内的值，可以说是增序排序 </span></span><br><span class="line">	zrangebyscore [key] [min] [max]</span><br><span class="line">	zrangebyscore [key] -inf +inf 		<span class="comment"># 表示按增序顺序显示所有的值</span></span><br><span class="line"><span class="comment"># 有顺序地显示区间内的值，可以说是降序排序</span></span><br><span class="line">	zrevrange [key] 0 -1	<span class="comment"># 表示降序顺序显示所有的值</span></span><br><span class="line"><span class="comment"># 获取有序集合的个数</span></span><br><span class="line">	zcrad [key]</span><br><span class="line"><span class="comment"># 获取指定区间的元素的个数</span></span><br><span class="line">	zount [key] [index1] [index2]</span><br></pre></td></tr></table></figure>
<h2 id="geospatial-地理位置"><a href="#geospatial-地理位置" class="headerlink" title="geospatial(地理位置)"></a>geospatial(地理位置)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用来表示地理位置，经纬度，实现底层就是Zset，所以一些命令也适用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个地理位置</span></span><br><span class="line">	geoadd [key] [经度] [纬度] [value]</span><br><span class="line"><span class="comment"># 获取指定值的经纬度</span></span><br><span class="line">	geopos [key] [value]</span><br><span class="line"><span class="comment"># 获取两个位置之间的距离</span></span><br><span class="line">	geodist [key] [value1] [value2] [单位]</span><br><span class="line"><span class="comment"># 指定某个位置和某个半径，返回半径内的值</span></span><br><span class="line">	georadius [key] [经度] [纬度] [半径] [单位]</span><br><span class="line">	georadius [key] [经度] [纬度] [半径] [单位] withdist	<span class="comment"># 还会显示到中心位置的距离</span></span><br><span class="line">	georadius [key] [经度] [纬度] [半径] [单位] withcoord	<span class="comment"># 会显示值当前的经纬度</span></span><br><span class="line"><span class="comment"># 指定一个元素和某个半径，返回离这个元素位置半径内的值</span></span><br><span class="line">	georadiusbymember [key] [value] [半径] [单位]</span><br><span class="line"><span class="comment"># 将指定位置经纬度转换为字符串</span></span><br><span class="line">	geohash [key] [value]</span><br></pre></td></tr></table></figure>
<h2 id="Hyperloglog-基数统计"><a href="#Hyperloglog-基数统计" class="headerlink" title="Hyperloglog(基数统计)"></a>Hyperloglog(基数统计)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基数，表示不重复元素的个数，存在误差</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加键值对,值为一个集合</span></span><br><span class="line">	pfadd [key] [value1] [value2] [value3]...</span><br><span class="line"><span class="comment"># 合并集合,不会重复</span></span><br><span class="line">	pfmerge [key] [key1] [key2]</span><br><span class="line"><span class="comment"># 统计基数数量</span></span><br><span class="line">	pfcount [key]</span><br></pre></td></tr></table></figure>
<h2 id="Bitmaps-位图"><a href="#Bitmaps-位图" class="headerlink" title="Bitmaps(位图)"></a>Bitmaps(位图)</h2><div class="tip info"><p>一般用来用户签到，统计活跃的用户和用户在线情况。</p>
</div>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用二进制来表示状态，用于那些只有两个状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加键值对</span></span><br><span class="line">	setbit [key] [index] [1或0]</span><br><span class="line"><span class="comment"># 获取值的状态</span></span><br><span class="line">	getbit [key] [index]</span><br><span class="line"><span class="comment"># 统计1的个数</span></span><br><span class="line">	bitcount sign</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对Redis的数据类型进行一个小的总结。</p>
<p>Redis的数据类型其实大概分为两类。</p>
<ul>
<li><p>五大数据类型</p>
<ol>
<li>String</li>
<li>Set</li>
<li>Hash</li>
<li>List</li>
<li>Zset</li>
</ol>
</li>
<li><p>三个特殊的数据类型</p>
<ol>
<li>geospatial</li>
<li>hyperloglog</li>
<li>bitmaps</li>
</ol>
</li>
</ul>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><ul>
<li>Redis的事务其实就是一组命令的队列</li>
<li>Redis事务没有隔离级别的概念</li>
<li>一次性，顺序性，排他性</li>
<li>Redis的单条命令存在原子性，但是事务是多条命令的集合，所以事务不具备原子性</li>
<li><p>Redis的事务分为三个阶段</p>
<ol>
<li>开启事务</li>
<li>命令入队</li>
<li>执行事务</li>
</ol>
</li>
<li><p>在开启事务后，输入的命令会进入队列，但是没有直接执行，要等所有命令入队后，发出执行命令才会一次性，依次执行</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启事务</span></span><br><span class="line">	multi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入multi命令出现ok，表示开启事务，之后输入命令，命令会入队</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行队列中的命令</span></span><br><span class="line">	<span class="built_in">exec</span></span><br><span class="line">	</span><br><span class="line"><span class="comment"># 要是想放弃执行事务，可以直接放弃事务</span></span><br><span class="line">	discard</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div class="tip warning"><ol>
<li>若是事务中存在错误的命令，那么整个事务的命令都不会被执行</li>
<li>若是事务中只是命令语法有问题，那么该命令会抛出异常，但是其他命令会正常执行</li>
</ol>
</div>
<h1 id="监视"><a href="#监视" class="headerlink" title="监视"></a>监视</h1><p>首先了解悲观锁和乐观锁这两个概念。</p>
<ul>
<li><p>悲观锁</p>
<p>悲观锁，顾名思义，什么时候都很悲观，每次访问公共数据，都会觉得别人会进行修改，所以每次获取该数据的时候，都会对数据加锁</p>
</li>
<li><p>乐观锁</p>
<p>乐观锁，顾名思义，什么时候都很乐观，每次访问公共数据，都觉得别人不会进行修改，所以每次都不会去上锁，只有在更新该数据后会判断一下使用期间其他线程有没有修改该数据。可以使用版本号来实现。每次更新数据后，判断该数据的版本号是否发生变更，发生了变更，就会导致修改失效，若是没有就会修改成功并修改版本号。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis的监控就是使用了乐观锁的操作</span></span><br><span class="line">	watch [key]</span><br><span class="line">	multi ... <span class="built_in">exec</span></span><br><span class="line"><span class="comment"># 使用watch来监视键值，一组事务执行后查看数据是否变更</span></span><br><span class="line"><span class="comment"># 若是已经变更，该事务就会失效，即执行失败</span></span><br><span class="line"><span class="comment"># 失败后就需要放弃监视,然后重新监视，执行事务，保证上锁的值是最新的值</span></span><br><span class="line">	unwatch [key]</span><br><span class="line">	watch [key]</span><br></pre></td></tr></table></figure>
<h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><p>存储在内存中的数据，一旦机器出现问题，那么内存中的数据就会丢失，所以为了尽量避免这个问题，Redis提供了两种持久化的方法，接下来来了解一下这两种持久化的方式。</p>
<h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>RDB持久化机制是将某个时刻的数据快照写入磁盘，也就是将某个时刻的数据保存下来，等到Redis服务启动，就会自动加载这个快照文件进行数据恢复。</p>
<h3 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h3><ul>
<li><p>save命令（不建议使用）</p>
<p>save是一个同步的命令，也就是说执行save命令，会让Redis的服务器发生阻塞，直到RDB持久化完成，其他命令才能正常进行。</p>
<p><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/2/2021-2-15/img4.png" alt=""></p>
</li>
<li><p>bgsave命令</p>
<p>bgsave是一个异步的命令，执行bgsave命令，Redis会<code>fork</code>一个子进程来进行RDB持久化，只有fork时才会阻塞，其他时间Redis正常运行。</p>
<p><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/2/2021-2-15/img5.png" alt=""></p>
</li>
</ul>
<h3 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a>自动触发</h3><p><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/2/2021-2-15/img6.png" alt=""></p>
<ul>
<li><p>满足配置文件中save配置的文件，默认配置如下，可以自己配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当900秒内至少有1个键值对发生变动，触发持久化</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="comment"># 当300秒内至少有10个键值对发生变动，触发持久化</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="comment"># 当60秒内至少有10000个键值对发生变动，触发持久化</span></span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>flushall</code>命令清空数据库时，触发持久化</p>
</li>
<li><p>执行<code>shutdown</code>命令等手段退出Redis时，触发持久化</p>
</li>
</ul>
<h3 id="RDB文件"><a href="#RDB文件" class="headerlink" title="RDB文件"></a>RDB文件</h3><p>从配置文件可以看到配置文件的默认路径和默认名。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rdb文件的默认文件名</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># rdb文件保存的目录</span></span><br><span class="line"><span class="built_in">dir</span> ./</span><br></pre></td></tr></table></figure>
<h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>AOF持久化全称<code>Append Only File</code>，当我们执行的改变数据的操作时就会将该命令追加到一个AOF文件的末尾，当Redis服务重新启动的时候，就会重新执行AOF文件内的命令，用来同步数据。</p>
<div class="tip info"><p>AOF不是默认的持久化方式，故默认关闭的，需要去配置文件手动开启。</p>
</div>
<p><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/2/2021-2-15/img7.png" alt=""></p>
<h3 id="AOF触发策略"><a href="#AOF触发策略" class="headerlink" title="AOF触发策略"></a>AOF触发策略</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># appendfsync always	</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># appendfsync no</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>always</p>
<p>每次有新的修改数据的命令，就会将缓冲区内的命令同步追加到AOF文件，十分安全，但是效率低</p>
</li>
<li><p>everysec</p>
<p>默认的策略，每秒将缓冲区内的命令同步追加到AOF文件，但是无法做到实时持久化，还是会可能丢失一秒的数据</p>
</li>
<li><p>no</p>
<p>交给操作系统来决定什么时候去同步追加数据</p>
</li>
</ul>
<h3 id="重写机制"><a href="#重写机制" class="headerlink" title="重写机制"></a>重写机制</h3><p>当命令不断被追加到AOF文件内，文件会越来越大，这对使用来说很不好，所以Redis提供了一个AOF的重写机制来解决这个问题，将AOF文件内的命令优化，重写为可以恢复到当前数据的最小指令集，从而减少文件的大小，达到压缩AOF文件的目的。</p>
<p>触发流程如下。</p>
<p><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/2/2021-2-15/img8.png" alt=""></p>
<h3 id="手动触发-1"><a href="#手动触发-1" class="headerlink" title="手动触发"></a>手动触发</h3><p>手动输入<code>bgrewriteaof</code>命令触发重写机制。</p>
<h3 id="自动触发-1"><a href="#自动触发-1" class="headerlink" title="自动触发"></a>自动触发</h3><p>自动触发就需要自行修改配置文件内AOF重写的配置。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重写触发条件</span></span><br><span class="line"><span class="comment"># 当AOF文件大于64mb而且比上一次重写的文件体积大了至少一倍，就会AOF重写</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>
<h2 id="持久化流程"><a href="#持久化流程" class="headerlink" title="持久化流程"></a>持久化流程</h2><p><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/2/2021-2-15/img9.png" alt=""></p>
<h1 id="过期Key"><a href="#过期Key" class="headerlink" title="过期Key"></a>过期Key</h1><h2 id="为什么要设置过期Key"><a href="#为什么要设置过期Key" class="headerlink" title="为什么要设置过期Key"></a>为什么要设置过期Key</h2><p>之前有提到过设置过期时间，那么就会有一个问题，为什么我们要多此一举去设置一个过期时间呢？</p>
<p>简而言之那就是，内存有限。</p>
<p>如果所有的Key都存在内存，数据量一大就会内存溢出了。</p>
<p>还有一个原因是用户希望存一个有过期时间的Key，就比如在一些场景下，过期Key就会显示很方便。Token的状态登陆或者是验证码的使用，都可以在Redis存储一个过期时间从而达到过期了就无法使用的目的。</p>
<p>不适用过期时间又想要实现这个功能，那就只能查询数据库获得记录，然后在判断是否过期，那也会有点麻烦。</p>
<h2 id="如何判断Key过期"><a href="#如何判断Key过期" class="headerlink" title="如何判断Key过期"></a>如何判断Key过期</h2><p>Redis 通过一个叫做过期字典（可以看作是hash表）来保存数据过期的时间。过期字典的键指向Redis数据库中的某个key(键)，过期字典的值是一个<code>long long</code>类型的整数，这个整数保存了key所指向的数据库键的过期时间（毫秒精度的UNIX时间戳）。</p>
<h2 id="过期Key的删除策略"><a href="#过期Key的删除策略" class="headerlink" title="过期Key的删除策略"></a>过期Key的删除策略</h2><ol>
<li><p>定期删除</p>
<p>每隔一段时间就会抽取一批Key来进行过期检查，过期了就进行删除。</p>
</li>
<li><p>惰性删除</p>
<p>每次从数据库获取Key时会判断该Key是否过期，要是过期了就会进行删除，没有过期就会返回数据给用户。</p>
</li>
<li><p>定时删除</p>
<p>在设置key的过期时间的同时，为该key创建一个定时器，让定时器在key的过期时间来临时，对key进行删除。</p>
</li>
</ol>
<p>Redis默认使用的就是定期删除和惰性删除的配合。</p>
<h1 id="Redis的内存淘汰策略"><a href="#Redis的内存淘汰策略" class="headerlink" title="Redis的内存淘汰策略"></a>Redis的内存淘汰策略</h1><p>刚才有提到过过期Key，从Redis的过期Key删除策略中可以看出这些删除策略并不能将每一个过期的Key都删掉，所以在数据量大的时候又加上过期的Key，就会出现内存满了的情况，那这种时候就需要淘汰掉一些内存数据了。</p>
<p>Redis提供有8种淘汰的策略。</p>
<ol>
<li><strong>volatile-lru</strong>：淘汰掉设置过期时间的数据集里最近最少使用的数据</li>
<li><strong>volatile-ttl</strong>：淘汰掉设置过期时间的数据集里的将要过期的数据</li>
<li><strong>volatile-random</strong>：随机选择设置过期时间的数据集里的数据来进行淘汰</li>
<li><strong>volatile-lfu</strong>：淘汰掉设置过期时间的数据集里最不经常使用的数据</li>
<li><strong>allkeys-lru</strong>：移除空间里最近最少使用的 key（这个是最常用的）</li>
<li><strong>allkeys-random</strong>：从空间中任意选择数据来进行淘汰</li>
<li><strong>allkeys-lfu</strong>：移除空间里最不经常使用的数据</li>
<li><strong>no-eviction</strong>：不允许淘汰数据，当内存满了之后在进行新数据的写入就会报错</li>
</ol>
<h1 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h1><p>发布订阅是一种消息通信模式。</p>
<p>发送者发送消息，订阅者接受发送者的消息。</p>
<p>接下来进行一个简单的测试。</p>
<ol>
<li><p>订阅一个频道，这里订阅<code>yww</code>这个频道</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; subscribe yww</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;yww&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>在打开一个Redis的客户端，然后往<code>yww</code>频道发送两条消息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; publish yww <span class="string">&quot;Hello Redis&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; publish yww <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>
</li>
<li><p>在订阅频道的订阅者的客户端就能接收到频道的消息了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; subscribe yww</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;yww&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;yww&quot;</span></span><br><span class="line">3) <span class="string">&quot;Hello Redis&quot;</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;yww&quot;</span></span><br><span class="line">3) <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>以下是一些常用的API</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 订阅一个或多个符和给定模式的频道</span></span><br><span class="line">psubscribe pattern[pattern...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退订一个或多个给定模式的频道</span></span><br><span class="line">punsubscribe [pattern[pattern]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看订阅与发布系统状态</span></span><br><span class="line">pubsub subcommand [argument[argument...]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将消息发送到指定的频道</span></span><br><span class="line">publish channel message</span><br><span class="line"></span><br><span class="line"><span class="comment"># 订阅一个或多个频道的信息</span></span><br><span class="line">subscribe channel[channel ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退订一个或多个频道的信息</span></span><br><span class="line">unsubscribe [channel[channel...]]</span><br></pre></td></tr></table></figure>
<h1 id="主从复制，读写分离"><a href="#主从复制，读写分离" class="headerlink" title="主从复制，读写分离"></a>主从复制，读写分离</h1><p>当数据量过大的时候，服务器的压力就会提高，为了解决这个问题，Redis提供了<code>主从复制，读写分离</code>的方案，因为大部分的压力是读操作，所以可以搭建一个Redis集群（最低要求三台，一主二从)，主节点负责写操作，从节点用来提供读的服务，这样就能减少服务器的压力了。</p>
<p><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/2/2021-2-15/img10.png" alt=""></p>
<p>当然还可以有以下这种情况</p>
<p><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/2/2021-2-15/img11.png" alt=""></p>
<p>节点是既可以当主节点，又可以当子节点的。</p>
<p>Redis的主从复制表示只有主节点能进行写操作，从节点是不能进行写操作的，只能进行读操作，主节点的数据会同步到子节点，达到整个集群的数据一致。</p>
<h2 id="同步机制"><a href="#同步机制" class="headerlink" title="同步机制"></a>同步机制</h2><p>上边说到的同步方式根据是否是全量来分为<code>全量同步</code>和<code>增量同步</code>。</p>
<ul>
<li><p>全量同步</p>
<p>全量同步的数据复制一般只会发生在<code>slave从节点</code>连接主节点的时候，这时从节点会将主节点中的所有数据都复制到从节点中，从而从节点连接主节点后数据通同步。</p>
<p>期间发生的具体步骤如下。</p>
<ol>
<li>从节点连接主节点后，向主节点发出<code>SYNC</code>命令</li>
<li>主节点收到<code>SYNC</code>命令后，开始执行<code>BGSAVE</code>生成RDB文件，因为是异步的操作，所以主节点继续处理命令，并将被执行的命令放入缓冲区</li>
<li>生成RDB文件后，就会向从节点发送快照文件</li>
<li>从节点收到主节点发送的RDB文件后，就会放弃原来存在的旧数据，然后载入RDB文件同步数据</li>
<li>触发增量同步</li>
</ol>
<p>这样主节点的数据旧全量同步复制到了从节点上。</p>
</li>
<li><p>增量同步</p>
<p>除了首次从节点的全量同步，一般数据的同步都是使用增量同步的方式</p>
<ol>
<li>主节点将缓冲区中的命令发送给从节点</li>
<li>从节点接收到命令请求，就会执行这些命令，完成部分写命令带来的数据同步</li>
</ol>
</li>
</ul>
<h2 id="模拟Redis集群"><a href="#模拟Redis集群" class="headerlink" title="模拟Redis集群"></a>模拟Redis集群</h2><p>这里使用同一个服务器，不同端口搭建的Redis集群进行学习。</p>
<p>当然你有多台服务器可以使用不同服务器来搭建集群来学习。</p>
<p>再不然可以直接开三个容器来搭建Redis集群来学习。</p>
<p>首先是了解一个基本的命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前服务的信息</span></span><br><span class="line">info replication</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master				<span class="comment"># 角色为主节点，没有配置，默认每个服务都是主机</span></span><br><span class="line">connected_slaves:0		<span class="comment"># 连接从节点的个数</span></span><br><span class="line">master_replid:fb2dce24da3d78a04f01a6f55abdd48e1751dda0</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>
<p>创建三个配置文件，用来开启三个服务。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis6379.conf  redis6380.conf  redis6381.conf</span><br></pre></td></tr></table></figure>
<p>然后配置这三个文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis6379.conf	主节点的配置</span></span><br><span class="line">logfile <span class="string">&quot;6379log.log&quot;</span></span><br><span class="line">dbfilename dump6379.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis6380.conf</span></span><br><span class="line">port 6380</span><br><span class="line">pidfile /var/run/redis_6380.pid</span><br><span class="line">logfile <span class="string">&quot;6380log.log&quot;</span></span><br><span class="line">dbfilename dump80.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis6381.conf</span></span><br><span class="line">port 6381</span><br><span class="line">pidfile /var/run/redis_6381.pid</span><br><span class="line">logfile <span class="string">&quot;6381log.log</span></span><br><span class="line"><span class="string">dbfilename dump6381.rdb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 开启redis集群服务</span></span><br><span class="line"><span class="string"># redis-server ./myconf/redis6379.conf </span></span><br><span class="line"><span class="string"># redis-server ./myconf/redis6380.conf </span></span><br><span class="line"><span class="string"># redis-server ./myconf/redis6381.conf </span></span><br><span class="line"><span class="string"># ps -ef |grep redis</span></span><br><span class="line"><span class="string">root     19536 19481  0 20:19 pts/1    00:00:00 redis-cli</span></span><br><span class="line"><span class="string">root     32040     1  0 22:30 ?        00:00:00 redis-server 127.0.0.1:6379</span></span><br><span class="line"><span class="string">root     32052     1  0 22:30 ?        00:00:00 redis-server 127.0.0.1:6380</span></span><br><span class="line"><span class="string">root     32062     1  0 22:30 ?        00:00:00 redis-server 127.0.0.1:6381</span></span><br><span class="line"><span class="string">root     32106 30264  0 22:30 pts/2    00:00:00 grep --color=auto redis</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 开启三个客户端，这里使用主节点的客户端演示，子节点客户端另开窗口</span></span><br><span class="line"><span class="string"># redis-cli -p 6379</span></span><br></pre></td></tr></table></figure>
<p>然后是建立主从联系，这里使用6379的服务当成主节点，建立联系有两种方法。</p>
<ul>
<li><p>在从节点中使用命令连接主机，这是简单的连接，要是从节点服务关闭了，之后重启旧连接不到主节点了，可以说是一次性的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SLAVEOF [host] [port]</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用配置设置，这种情况，从节点服务重启后就会继续连接主机</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################# REPLICATION #################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在这下面配置主节点服务地址就好了，样例已经给出</span></span><br><span class="line"><span class="comment"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要是主节点服务有密码可以在这里配置</span></span><br><span class="line"><span class="comment"># masterauth &lt;master-password&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这里连接6379当成主节点。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置6380从节点</span></span><br><span class="line">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:3</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:28</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:8ed59f23d41ec553e33eae6b5fb13cfd1d807e80</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:28</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:28</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置6381从节点</span></span><br><span class="line">127.0.0.1:6381&gt; SLAVEOF 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:9</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:42</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:8ed59f23d41ec553e33eae6b5fb13cfd1d807e80</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:42</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:15</span><br><span class="line">repl_backlog_histlen:28 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看6379主节点信息</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=70,lag=1</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=70,lag=1</span><br><span class="line">master_replid:8ed59f23d41ec553e33eae6b5fb13cfd1d807e80</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:70</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:70</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后在主机设置的数据，可以在从机中获取数据。</p>
<h2 id="哨兵模式（Sentinel）"><a href="#哨兵模式（Sentinel）" class="headerlink" title="哨兵模式（Sentinel）"></a>哨兵模式（Sentinel）</h2><p>通过配置连接的子节点出现故障，重启服务后，因为配置连接的缘故那还是子节点，所以子节点出现故障的情况很简单。</p>
<div class="tip info"><p>要是这个子节点有子节点，那么主机故障后，子节点的role依旧是salve，所以还是不能进行写操作。</p>
</div>
<p>接下来重点了解一下主节点出现故障的情况。</p>
<p>当主节点出现故障后，它的子节点身份是不会变的，当主节点的服务重新启动后，集群依旧存在。</p>
<p>当我们不清楚主节点何时恢复，总不能一直不进行写操作，所以就需要重新推出一个主节点。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 令从节点恢复master</span></span><br><span class="line">SLAVEOF no one</span><br><span class="line"><span class="comment"># 然后在配置其他节点连接至该节点</span></span><br></pre></td></tr></table></figure>
<p> 这是手动配置主节点，这其实还是挺麻烦的，所以为了解决这个问题，Redis从2.8的版本后就提供了<code>哨兵模式</code>这个方案。</p>
<hr>
<p>哨兵模式其实就是自动推选主节点的一种方案。</p>
<p>先来简单了解一下哨兵模式。</p>
<p>哨兵是一个独立的进程，在Redis的命令中也能看到它<code>redis-sentinel</code>。</p>
<p>该进程通过向各个节点发送命令，通过节点返回的信息来监控节点的使用情况。</p>
<p><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/2/2021-2-15/img12.png" alt=""></p>
<p>当主节点宕机了，哨兵向主节点发送命令却得不到返回信息，过段时间哨兵确认主节点宕机后，就会随机给从节点随机投票，获得投票的节点就会当选为主节点，然后通过发布订阅模式通知其他的从节点修改配置，让它们切换主节点对象，从而实现集群正常服务。</p>
<p>那要是哨兵宕机了怎么办呢？这样的设置还是会出现问题。所以哨兵不能只有一台，哨兵也要形成一个集群（最好三个起步），于是最终的解决方案就如下图。</p>
<p><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/2/2021-2-15/img13.png" alt=""></p>
<p>多个哨兵进行监控，当有一个哨兵检测到主节点宕机，并不会马上切换，因为有可能是哨兵的问题，所以哨兵只会主观认为主节点宕机（这种情况叫主观下线）。</p>
<p>当一定个数（在哨兵的配置文件可以配置）的哨兵都认为主节点宕机后，那大概率就不是哨兵的问题了，那么哨兵之前就会对剩余的从节点投票，投票结束后，随机一个哨兵进行<code>failover</code>操作（这种情况叫客观下线）。</p>
<p><code>failover</code>又称故障转移，它会从从节点中挑选一个作为Redis集群中的新的主节点。</p>
<ol>
<li>选择票数高的从节点当为主节点，若是不存在（同票的情况），就继续判断。</li>
<li>选择主从复制，同步数据最完整的节点成为主节点，若是不存在就继续判断。</li>
<li>选择启动最早的子节点当为新的主节点。</li>
</ol>
<p>对选出来的主节点执行<code>slaveof no one</code>将身份转换成主节点，然后向其他的从节点发送订阅模式通知，各个哨兵就会让他们的节点切换主节点的对象为新的主节点。最后更新之前宕掉的节点的身份为从节点，当宕机恢复后，就自动成为该集群的从节点。</p>
<hr>
<p>哨兵的启动需要先配置哨兵启动的配置文件<code>sentinel.conf</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example sentinel.conf</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel运行的端口，默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel的工作目录</span></span><br><span class="line"><span class="built_in">dir</span> /tmp</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 最主要的一个配置，这个是必定配置的</span></span><br><span class="line"><span class="comment"># master-name为主节点名称,ip为主节点的ip，port主节点Redis服务断开</span></span><br><span class="line"><span class="comment"># 哨兵对主节点主观下线的个数达到quorum个后，就会执行故障转移。(三个节点就用2)</span></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 当哨兵向主节点发送命令后，超过times毫秒没得到回应，该哨兵就会认为主节点宕机，默认30秒</span></span><br><span class="line"><span class="comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行同步</span></span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 故障转移的超时时间 failover-timeout，默认三分钟</span></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment"># SCRIPTS EXECUTION</span></span><br><span class="line"><span class="comment"># 配置当某一事件发生时所需要执行的脚本，对于脚本的运行结果有以下规则：</span></span><br><span class="line"><span class="comment"># 若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数默认为10</span></span><br><span class="line"><span class="comment"># 若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span></span><br><span class="line"><span class="comment"># 如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class="line"><span class="comment"># 一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 通知型脚本，主要用于通知故障的情况</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端重新配置主节点参数脚本</span></span><br><span class="line"><span class="comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class="line"><span class="comment"># 以下参数将会在调用脚本时传给脚本:</span></span><br><span class="line"><span class="comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class="line"><span class="comment"># 目前&lt;state&gt;总是“failover”,</span></span><br><span class="line"><span class="comment"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span></span><br><span class="line"><span class="comment"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span></span><br><span class="line"><span class="comment"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启哨兵线程</span></span><br><span class="line">	redis-sentinel ./sentinel.conf</span><br></pre></td></tr></table></figure>
<h1 id="redis-conf"><a href="#redis-conf" class="headerlink" title="redis.conf"></a>redis.conf</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################## INCLUDES ###################################</span></span><br><span class="line"><span class="comment"># include /path/to/local.conf</span></span><br><span class="line"><span class="comment"># include /path/to/other.conf</span></span><br><span class="line"><span class="comment"># 包含多个配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## NETWORK #####################################</span></span><br><span class="line"><span class="comment"># 绑定IP</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line"><span class="comment"># 打开安全模式，默认是打开的</span></span><br><span class="line">protected-mode <span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 绑定端口</span></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"><span class="comment">################################# GENERAL #####################################</span></span><br><span class="line"><span class="comment"># 是否以守护线程方式开启服务，默认为no,建议改为yes</span></span><br><span class="line">daemonize no</span><br><span class="line"><span class="comment"># 如果以后台方式运行，需要指定pid文件</span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志形式</span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志文件路径</span></span><br><span class="line">logfile <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库数量</span></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################################# REPLICATION #################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在这下面配置主节点服务地址就好了，样例已经给出</span></span><br><span class="line"><span class="comment"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要是主节点服务有密码可以在这里配置</span></span><br><span class="line"><span class="comment"># masterauth &lt;master-password&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################################ SNAPSHOTTING  ################################</span></span><br><span class="line"><span class="comment"># 持久化设置</span></span><br><span class="line"><span class="comment"># save s k</span></span><br><span class="line"><span class="comment"># 表示在s秒内，若是有至少修改了k个键值对，就会进行持久化操作</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化出错是否继续工作</span></span><br><span class="line">stop-writes-on-bgsave-error <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否压缩rdb文件</span></span><br><span class="line">rdbcompression <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对保存的rdb文件时进行校验检测</span></span><br><span class="line">rdbchecksum <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rdb文件的默认文件名</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># rdb文件保存的目录</span></span><br><span class="line"><span class="built_in">dir</span> ./</span><br><span class="line"></span><br><span class="line"><span class="comment">################################## SECURITY ###################################</span></span><br><span class="line"><span class="comment"># 设置密码，默认是没有设置该选项的</span></span><br><span class="line"><span class="comment"># requirepass foobared</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################### CLIENTS ####################################</span></span><br><span class="line"><span class="comment"># 设置最大连接的客户端数</span></span><br><span class="line"><span class="comment"># maxclients 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################## MEMORY MANAGEMENT ################################</span></span><br><span class="line"><span class="comment"># 设置redis最大的内存容量</span></span><br><span class="line"><span class="comment"># maxmemory &lt;bytes&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内存满了的处理策略</span></span><br><span class="line"><span class="comment"># maxmemory-policy noeviction</span></span><br><span class="line"><span class="comment"># 1. noeviction：当内存使用超过配置的时候会返回错误，不会驱逐任何键</span></span><br><span class="line"><span class="comment"># 2. allkeys-lru：加入键的时候，如果过限，首先通过LRU算法驱逐最久没有使用的键</span></span><br><span class="line"><span class="comment"># 3. volatile-lru：加入键的时候如果过限，首先从设置了过期时间的键集合中驱逐最久没有使用的键</span></span><br><span class="line"><span class="comment"># 4. allkeys-random：加入键的时候如果过限，从所有key随机删除</span></span><br><span class="line"><span class="comment"># 5. volatile-random：加入键的时候如果过限，从过期键的集合中随机驱逐</span></span><br><span class="line"><span class="comment"># 6. volatile-ttl：从配置了过期时间的键中驱逐马上就要过期的键</span></span><br><span class="line"><span class="comment"># 7. volatile-lfu：从所有配置了过期时间的键中驱逐使用频率最少的键</span></span><br><span class="line"><span class="comment"># 8. allkeys-lfu：从所有键中驱逐使用频率最少的键</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################## APPEND ONLY MODE ###############################</span></span><br><span class="line"><span class="comment"># 是否开启aof模式，默认不开启，使用rdb方式持久化</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化的文件名字</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步策略</span></span><br><span class="line"><span class="comment"># 每次都会同步</span></span><br><span class="line"><span class="comment"># appendfsync always	</span></span><br><span class="line"><span class="comment"># 每秒进行一次同步</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># 不执行同步，交给操作系统自己同步</span></span><br><span class="line"><span class="comment"># appendfsync no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行重写时同步数据到AOF文件，默认为no，yes表示不同步直接写入新的AOF文件</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重写触发条件</span></span><br><span class="line"><span class="comment"># 当AOF文件大于64mb而且比上一次重写的文件体积大了至少一倍，就会AOF重写</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>
<h1 id="一些参考链接"><a href="#一些参考链接" class="headerlink" title="一些参考链接"></a>一些参考链接</h1><ul>
<li><a target="_blank" rel="noopener external nofollow noreferrer" href="https://zhuanlan.zhihu.com/p/105587132">https://zhuanlan.zhihu.com/p/105587132</a></li>
<li><a target="_blank" rel="noopener external nofollow noreferrer" href="https://www.bilibili.com/video/BV1S54y1R7SB?p=1">https://www.bilibili.com/video/BV1S54y1R7SB?p=1</a></li>
<li><a target="_blank" rel="noopener external nofollow noreferrer" href="https://baijiahao.baidu.com/s?id=1654694618189745916&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1654694618189745916&amp;wfr=spider&amp;for=pc</a></li>
<li><a target="_blank" rel="noopener external nofollow noreferrer" href="https://blog.csdn.net/weixin_39040059/article/details/79120444">https://blog.csdn.net/weixin_39040059/article/details/79120444</a></li>
<li><a target="_blank" rel="noopener external nofollow noreferrer" href="https://www.runoob.com/redis/redis-tutorial.html">https://www.runoob.com/redis/redis-tutorial.html</a></li>
<li><a target="_blank" rel="noopener external nofollow noreferrer" href="https://www.cnblogs.com/daofaziran/p/10978628.html">https://www.cnblogs.com/daofaziran/p/10978628.html</a></li>
<li><a target="_blank" rel="noopener external nofollow noreferrer" href="https://www.jianshu.com/p/06ab9daf921d">https://www.jianshu.com/p/06ab9daf921d</a></li>
</ul>
</article><div class="tag_share"><div class="post-share"><div class="social-share" data-image="https://img.yww52.com/2021/2/2021-2-15/top_img.jpg" data-sites="facebook,twitter,wechat,weibo,qq"></div><link rel="stylesheet" href="https://lib.baomitu.com/social-share.js/1.0.16/css/share.min.css" media="print" onload="this.media='all'"><script src="https://lib.baomitu.com/social-share.js/1.0.16/js/social-share.min.js" defer></script></div></div><nav class="pagination-post" id="pagination"><a class="pagination-related" href="/posts/dd921d98" title="剑指Offer"><img class="cover" src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/3/2021-3-19top_img.jpg" onerror="onerror=null;src='/yww/img/404avatar.jpg'" alt="cover of previous post"><div class="info"><div class="info-1"><div class="info-item-1">上一篇</div><div class="info-item-2">剑指Offer</div></div><div class="info-2"><div class="info-item-1">剑指Offer上面的题目，记录一下解题的过程</div></div></div></a><a class="pagination-related" href="/posts/b0ab3ebd" title="常用的工具类"><img class="cover" src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/2021/2/2021-2-3top_img.jpg" onerror="onerror=null;src='/yww/img/404avatar.jpg'" alt="cover of next post"><div class="info text-right"><div class="info-1"><div class="info-item-1">下一篇</div><div class="info-item-2">常用的工具类</div></div><div class="info-2"><div class="info-item-1">记录一下开发中经常使用的工具类。</div></div></div></a></nav><hr class="custom-hr"/><div id="post-comment"><div class="comment-head"><div class="comment-headline"><i class="fas fa-comments fa-fw"></i><span> 评论</span></div></div><div class="comment-wrap"><div><div id="twikoo-wrap"></div></div></div></div></div><div class="aside-content" id="aside-content"><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="fas fa-stream"></i><span>目录</span><span class="toc-percentage"></span></div><div class="toc-content"><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#%E4%BB%80%E4%B9%88%E6%98%AFNoSQL"><span class="toc-number">1.</span> <span class="toc-text">什么是NoSQL</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E4%BB%80%E4%B9%88%E6%98%AFRedis"><span class="toc-number">2.</span> <span class="toc-text">什么是Redis</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%AE%89%E8%A3%85"><span class="toc-number">3.</span> <span class="toc-text">安装</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#windows"><span class="toc-number">3.1.</span> <span class="toc-text">windows</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#Linux"><span class="toc-number">3.2.</span> <span class="toc-text">Linux</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95"><span class="toc-number">4.</span> <span class="toc-text">性能测试</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"><span class="toc-number">5.</span> <span class="toc-text">数据类型</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#String-%E5%AD%97%E7%AC%A6%E4%B8%B2"><span class="toc-number">5.1.</span> <span class="toc-text">String(字符串)</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#List-%E5%88%97%E8%A1%A8"><span class="toc-number">5.2.</span> <span class="toc-text">List(列表)</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#Set-%E9%9B%86%E5%90%88"><span class="toc-number">5.3.</span> <span class="toc-text">Set(集合)</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#Hash-%E5%93%88%E5%B8%8C"><span class="toc-number">5.4.</span> <span class="toc-text">Hash(哈希)</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#Zset-%E6%9C%89%E5%BA%8F%E7%9A%84%E9%9B%86%E5%90%88"><span class="toc-number">5.5.</span> <span class="toc-text">Zset(有序的集合)</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#geospatial-%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE"><span class="toc-number">5.6.</span> <span class="toc-text">geospatial(地理位置)</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#Hyperloglog-%E5%9F%BA%E6%95%B0%E7%BB%9F%E8%AE%A1"><span class="toc-number">5.7.</span> <span class="toc-text">Hyperloglog(基数统计)</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#Bitmaps-%E4%BD%8D%E5%9B%BE"><span class="toc-number">5.8.</span> <span class="toc-text">Bitmaps(位图)</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%80%BB%E7%BB%93"><span class="toc-number">5.9.</span> <span class="toc-text">总结</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E4%BA%8B%E5%8A%A1"><span class="toc-number">6.</span> <span class="toc-text">事务</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E7%9B%91%E8%A7%86"><span class="toc-number">7.</span> <span class="toc-text">监视</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%8C%81%E4%B9%85%E5%8C%96"><span class="toc-number">8.</span> <span class="toc-text">持久化</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#RDB"><span class="toc-number">8.1.</span> <span class="toc-text">RDB</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%89%8B%E5%8A%A8%E8%A7%A6%E5%8F%91"><span class="toc-number">8.1.1.</span> <span class="toc-text">手动触发</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91"><span class="toc-number">8.1.2.</span> <span class="toc-text">自动触发</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#RDB%E6%96%87%E4%BB%B6"><span class="toc-number">8.1.3.</span> <span class="toc-text">RDB文件</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#AOF"><span class="toc-number">8.2.</span> <span class="toc-text">AOF</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#AOF%E8%A7%A6%E5%8F%91%E7%AD%96%E7%95%A5"><span class="toc-number">8.2.1.</span> <span class="toc-text">AOF触发策略</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%87%8D%E5%86%99%E6%9C%BA%E5%88%B6"><span class="toc-number">8.2.2.</span> <span class="toc-text">重写机制</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%89%8B%E5%8A%A8%E8%A7%A6%E5%8F%91-1"><span class="toc-number">8.2.3.</span> <span class="toc-text">手动触发</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91-1"><span class="toc-number">8.2.4.</span> <span class="toc-text">自动触发</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%8C%81%E4%B9%85%E5%8C%96%E6%B5%81%E7%A8%8B"><span class="toc-number">8.3.</span> <span class="toc-text">持久化流程</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%BF%87%E6%9C%9FKey"><span class="toc-number">9.</span> <span class="toc-text">过期Key</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%9C%9FKey"><span class="toc-number">9.1.</span> <span class="toc-text">为什么要设置过期Key</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%ADKey%E8%BF%87%E6%9C%9F"><span class="toc-number">9.2.</span> <span class="toc-text">如何判断Key过期</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%BF%87%E6%9C%9FKey%E7%9A%84%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5"><span class="toc-number">9.3.</span> <span class="toc-text">过期Key的删除策略</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#Redis%E7%9A%84%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5"><span class="toc-number">10.</span> <span class="toc-text">Redis的内存淘汰策略</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85"><span class="toc-number">11.</span> <span class="toc-text">发布订阅</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%EF%BC%8C%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB"><span class="toc-number">12.</span> <span class="toc-text">主从复制，读写分离</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6"><span class="toc-number">12.1.</span> <span class="toc-text">同步机制</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%A8%A1%E6%8B%9FRedis%E9%9B%86%E7%BE%A4"><span class="toc-number">12.2.</span> <span class="toc-text">模拟Redis集群</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%EF%BC%88Sentinel%EF%BC%89"><span class="toc-number">12.3.</span> <span class="toc-text">哨兵模式（Sentinel）</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#redis-conf"><span class="toc-number">13.</span> <span class="toc-text">redis.conf</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E4%B8%80%E4%BA%9B%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"><span class="toc-number">14.</span> <span class="toc-text">一些参考链接</span></a></li></ol></div></div></div></div></main><footer id="footer" style="background-image: url(https://img.yww52.com/image/footer.jpg);"><div id="footer-wrap"><div class="copyright">&copy;2018 - 2024 By yww</div><div class="framework-info"><span>框架 </span><a target="_blank" rel="noopener external nofollow noreferrer" href="https://hexo.io">Hexo</a><span class="footer-separator">|</span><span>主题 </span><a target="_blank" rel="noopener external nofollow noreferrer" href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a></div><div class="footer_custom_text"><a target="_blank" rel="noopener external nofollow noreferrer" href="https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referra"><img src= "/yww/img/404.jpg" data-lazy-src="https://img.yww52.com/image/cdnlogo.png"align="absmiddle" width="59px" height="30px" /></a><span>提供加速服务</span> </br><a target="_blank" rel="noopener external nofollow noreferrer" href="https://beian.miit.gov.cn"><span>桂ICP备20005765号</span></a></div></div></footer></div><div id="rightside"><div id="rightside-config-hide"><button id="readmode" type="button" title="阅读模式"><i class="fas fa-book-open"></i></button><button id="darkmode" type="button" title="日间和夜间模式切换"><i class="fas fa-adjust"></i></button><button id="hide-aside-btn" type="button" title="单栏和双栏切换"><i class="fas fa-arrows-alt-h"></i></button></div><div id="rightside-config-show"><button id="rightside-config" type="button" title="设置"><i class="fas fa-cog fa-spin"></i></button><button class="close" id="mobile-toc-button" type="button" title="目录"><i class="fas fa-list-ul"></i></button><a id="to_comment" href="#post-comment" title="前往评论"><i class="fas fa-comments"></i></a><button id="go-up" type="button" title="回到顶部"><span class="scroll-percent"></span><i class="fas fa-arrow-up"></i></button></div></div><div><script src="/js/utils.js"></script><script src="/js/main.js"></script><script src="https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/instant.page/5.1.0/instantpage.min.js" type="module"></script><script src="https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/vanilla-lazyload/17.3.1/lazyload.iife.min.js"></script><script src="https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/node-snackbar/0.1.16/snackbar.min.js"></script><script>(() => {
  const panguFn = () => {
    if (typeof pangu === 'object') pangu.autoSpacingPage()
    else {
      btf.getScript('https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js')
        .then(() => {
          pangu.autoSpacingPage()
        })
    }
  }

  const panguInit = () => {
    if (true){
      GLOBAL_CONFIG_SITE.isPost && panguFn()
    } else {
      panguFn()
    }
  }

  btf.addGlobalFn('pjaxComplete', panguInit, 'pangu')
  document.addEventListener('DOMContentLoaded', panguInit)
})()</script><div class="js-pjax"><script>(() => {
  const isShuoshuo = GLOBAL_CONFIG_SITE.isShuoshuo
  const option = null

  const getCount = () => {
    const countELement = document.getElementById('twikoo-count')
    if(!countELement) return
    twikoo.getCommentsCount({
      envId: 'https://comment.yww52.com',
      region: '',
      urls: [window.location.pathname],
      includeReply: false
    }).then(res => {
      countELement.textContent = res[0].count
    }).catch(err => {
      console.error(err)
    })
  }

  const init = (el = document, path = location.pathname) => {
    twikoo.init({
      el: el.querySelector('#twikoo-wrap'),
      envId: 'https://comment.yww52.com',
      region: '',
      onCommentLoaded: () => {
        btf.loadLightbox(document.querySelectorAll('#twikoo .tk-content img:not(.tk-owo-emotion)'))
      },
      ...option,
      path: isShuoshuo ? path : (option && option.path) || path
    })

    

    isShuoshuo && (window.shuoshuoComment.destroyTwikoo = () => {
      if (el.children.length) {
        el.innerHTML = ''
        el.classList.add('no-comment')
      }
    })
  }

  const loadTwikoo = (el, path) => {
    if (typeof twikoo === 'object') setTimeout(() => init(el, path), 0)
    else btf.getScript('https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/twikoo/1.4.18/twikoo.all.min.js').then(() => init(el, path))
  }

  if (isShuoshuo) {
    'Twikoo' === 'Twikoo'
      ? window.shuoshuoComment = { loadComment: loadTwikoo }
      : window.loadOtherComment = loadTwikoo
    return
  }

  if ('Twikoo' === 'Twikoo' || !true) {
    if (true) btf.loadComment(document.getElementById('twikoo-wrap'), loadTwikoo)
    else loadTwikoo()
  } else {
    window.loadOtherComment = loadTwikoo
  }
})()</script></div><script>window.newestComments = {
  changeContent: content => {
    if (content === '') return content

    content = content.replace(/<img.*?src="(.*?)"?[^\>]+>/ig, '[图片]') // replace image link
    content = content.replace(/<a[^>]+?href=["']?([^"']+)["']?[^>]*>([^<]+)<\/a>/gi, '[链接]') // replace url
    content = content.replace(/<pre><code>.*?<\/pre>/gi, '[代码]') // replace code
    content = content.replace(/<code>.*?<\/code>/gi, '[代码]') // replace code      
    content = content.replace(/<[^>]+>/g, "") // remove html tag

    if (content.length > 150) {
      content = content.substring(0, 150) + '...'
    }
    return content
  },

  generateHtml: (array, ele) => {
    let result = ''

    if (array.length) {
      for (let i = 0; i < array.length; i++) {
        result += '<div class="aside-list-item">'

        if (true && array[i].avatar) {
          const imgAttr = 'data-lazy-src'
          result += `<a href="${array[i].url}" class="thumbnail"><img ${imgAttr}="${array[i].avatar}" alt="${array[i].nick}"></a>`
        }

        result += `<div class="content">
        <a class="comment" href="${array[i].url}" title="${array[i].content}">${array[i].content}</a>
        <div class="name"><span>${array[i].nick} / </span><time datetime="${array[i].date}">${btf.diffDate(array[i].date, true)}</time></div>
        </div></div>`
      }
    } else {
      result += '暂无评论'
    }

    ele.innerHTML = result
    window.lazyLoadInstance && window.lazyLoadInstance.update()
    window.pjax && window.pjax.refresh(ele)
  },

  newestCommentInit: (name, getComment) => {
    const $dom = document.querySelector('#card-newest-comments .aside-list')
    if ($dom) {
      const data = btf.saveToLocal.get(name)
      if (data) {
        newestComments.generateHtml(JSON.parse(data), $dom)
      } else {
        getComment($dom)
      }
    }
  },

  run: (name, getComment) => {
    newestComments.newestCommentInit(name, getComment)
    btf.addGlobalFn('pjaxComplete', () => newestComments.newestCommentInit(name, getComment), name)
  }
}</script><script>window.addEventListener('load', () => {
  const keyName = 'twikoo-newest-comments'
  const { changeContent, generateHtml, run } = window.newestComments

  const getComment = ele => {
    const runTwikoo = () => {
      twikoo.getRecentComments({
        envId: 'https://comment.yww52.com',
        region: '',
        pageSize: 6,
        includeReply: true
      }).then(res => {
        const twikooArray = res.map(e => {
          return {
            'content': changeContent(e.comment),
            'avatar': e.avatar,
            'nick': e.nick,
            'url': e.url + '#' + e.id,
            'date': new Date(e.created).toISOString()
          }
        })

        btf.saveToLocal.set(keyName, JSON.stringify(twikooArray), 10/(60*24))
        generateHtml(twikooArray, ele)
      }).catch(err => {
        console.error(err)
        ele.textContent= "无法获取评论，请确认相关配置是否正确"
      })
    }

    if (typeof twikoo === 'object') {
      runTwikoo()
    } else {
      btf.getScript('https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/twikoo/1.4.18/twikoo.all.min.js').then(runTwikoo)
    }
  }

  run(keyName, getComment)
})</script><link rel="stylesheet" href="/yww/styles/optimize.css"><link rel="stylesheet" href="/yww/styles/twikoo.css"><link rel="stylesheet" href="/yww/styles/iconfont.css"><script async data-pjax src="/yww/scripts/main.js"></script><script src="https://lib.baomitu.com/pjax/0.2.8/pjax.min.js"></script><script>(() => {
  const pjaxSelectors = ["head > title","#config-diff","#body-wrap","#rightside-config-hide","#rightside-config-show",".js-pjax"]

  window.pjax = new Pjax({
    elements: 'a:not([target="_blank"])',
    selectors: pjaxSelectors,
    cacheBust: false,
    analytics: false,
    scrollRestoration: false
  })

  const triggerPjaxFn = (val) => {
    if (!val) return
    Object.values(val).forEach(fn => fn())
  }

  document.addEventListener('pjax:send', () => {
    // removeEventListener
    btf.removeGlobalFnEvent('pjaxSendOnce')
    btf.removeGlobalFnEvent('themeChange')

    // reset readmode
    const $bodyClassList = document.body.classList
    if ($bodyClassList.contains('read-mode')) $bodyClassList.remove('read-mode')

    triggerPjaxFn(window.globalFn.pjaxSend)
  })

  document.addEventListener('pjax:complete', () => {
    btf.removeGlobalFnEvent('pjaxCompleteOnce')
    document.querySelectorAll('script[data-pjax]').forEach(item => {
      const newScript = document.createElement('script')
      const content = item.text || item.textContent || item.innerHTML || ""
      Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value))
      newScript.appendChild(document.createTextNode(content))
      item.parentNode.replaceChild(newScript, item)
    })

    triggerPjaxFn(window.globalFn.pjaxComplete)
  })

  document.addEventListener('pjax:error', e => {
    if (e.request.status === 404) {
      pjax.loadUrl('/404.html')
    }
  })
})()</script><script async data-pjax src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script><div id="local-search"><div class="search-dialog"><nav class="search-nav"><span class="search-dialog-title">搜索</span><span id="loading-status"></span><button class="search-close-button"><i class="fas fa-times"></i></button></nav><div class="text-center" id="loading-database"><i class="fas fa-spinner fa-pulse"></i><span>  数据加载中</span></div><div class="search-wrap"><div id="local-search-input"><div class="local-search-box"><input class="local-search-box--input" placeholder="搜索文章" type="text"/></div></div><hr/><div id="local-search-results"></div><div id="local-search-stats-wrap"></div></div></div><div id="search-mask"></div><script src="/js/search/local-search.js"></script></div></div><!-- hexo injector body_end start --><script async src="//at.alicdn.com/t/font_2032782_8d5kxvn09md.js"></script><!-- hexo injector body_end end --></body></html>