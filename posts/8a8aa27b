<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1.0,viewport-fit=cover"><title>lambda表达式与Stream流 | yww</title><meta name="author" content="yww"><meta name="copyright" content="yww"><meta name="format-detection" content="telephone=no"><meta name="theme-color" content="#ffffff"><meta name="description" content="Java8的新特性，优化代码。">
<meta property="og:type" content="article">
<meta property="og:title" content="lambda表达式与Stream流">
<meta property="og:url" content="https://yww52.com/posts/8a8aa27b">
<meta property="og:site_name" content="yww">
<meta property="og:description" content="Java8的新特性，优化代码。">
<meta property="og:locale" content="zh_CN">
<meta property="og:image" content="https://img.yww52.com/2021/12/2021-12-6top_img.jpg">
<meta property="article:published_time" content="2021-12-05T16:00:00.000Z">
<meta property="article:modified_time" content="2025-07-18T09:57:30.191Z">
<meta property="article:author" content="yww">
<meta property="article:tag" content="yw,yww">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://img.yww52.com/2021/12/2021-12-6top_img.jpg"><link rel="shortcut icon" href="/img/favicon.png"><link rel="canonical" href="https://yww52.com/posts/8a8aa27b"><link rel="preconnect" href="//cdn.jsdelivr.net"/><link rel="preconnect" href="//busuanzi.ibruce.info"/><link rel="stylesheet" href="/css/index.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css"><script>
    (() => {
      
    const saveToLocal = {
      set: (key, value, ttl) => {
        if (!ttl) return
        const expiry = Date.now() + ttl * 86400000
        localStorage.setItem(key, JSON.stringify({ value, expiry }))
      },
      get: key => {
        const itemStr = localStorage.getItem(key)
        if (!itemStr) return undefined
        const { value, expiry } = JSON.parse(itemStr)
        if (Date.now() > expiry) {
          localStorage.removeItem(key)
          return undefined
        }
        return value
      }
    }

    window.btf = {
      saveToLocal,
      getScript: (url, attr = {}) => new Promise((resolve, reject) => {
        const script = document.createElement('script')
        script.src = url
        script.async = true
        Object.entries(attr).forEach(([key, val]) => script.setAttribute(key, val))
        script.onload = script.onreadystatechange = () => {
          if (!script.readyState || /loaded|complete/.test(script.readyState)) resolve()
        }
        script.onerror = reject
        document.head.appendChild(script)
      }),
      getCSS: (url, id) => new Promise((resolve, reject) => {
        const link = document.createElement('link')
        link.rel = 'stylesheet'
        link.href = url
        if (id) link.id = id
        link.onload = link.onreadystatechange = () => {
          if (!link.readyState || /loaded|complete/.test(link.readyState)) resolve()
        }
        link.onerror = reject
        document.head.appendChild(link)
      }),
      addGlobalFn: (key, fn, name = false, parent = window) => {
        if (!false && key.startsWith('pjax')) return
        const globalFn = parent.globalFn || {}
        globalFn[key] = globalFn[key] || {}
        globalFn[key][name || Object.keys(globalFn[key]).length] = fn
        parent.globalFn = globalFn
      }
    }
  
      
      const activateDarkMode = () => {
        document.documentElement.setAttribute('data-theme', 'dark')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#0d0d0d')
        }
      }
      const activateLightMode = () => {
        document.documentElement.setAttribute('data-theme', 'light')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#ffffff')
        }
      }

      btf.activateDarkMode = activateDarkMode
      btf.activateLightMode = activateLightMode

      const theme = saveToLocal.get('theme')
    
          theme === 'dark' ? activateDarkMode() : theme === 'light' ? activateLightMode() : null
        
      
      const asideStatus = saveToLocal.get('aside-status')
      if (asideStatus !== undefined) {
        document.documentElement.classList.toggle('hide-aside', asideStatus === 'hide')
      }
    
      
    const detectApple = () => {
      if (/iPad|iPhone|iPod|Macintosh/.test(navigator.userAgent)) {
        document.documentElement.classList.add('apple')
      }
    }
    detectApple()
  
    })()
  </script><script>const GLOBAL_CONFIG = {
  root: '/',
  algolia: undefined,
  localSearch: undefined,
  translate: undefined,
  highlight: {"plugin":"highlight.js","highlightCopy":true,"highlightLang":true,"highlightHeightLimit":false,"highlightFullpage":false,"highlightMacStyle":false},
  copy: {
    success: '复制成功',
    error: '复制失败',
    noSupport: '浏览器不支持'
  },
  relativeDate: {
    homepage: false,
    post: false
  },
  runtime: '',
  dateSuffix: {
    just: '刚刚',
    min: '分钟前',
    hour: '小时前',
    day: '天前',
    month: '个月前'
  },
  copyright: undefined,
  lightbox: 'null',
  Snackbar: undefined,
  infinitegrid: {
    js: 'https://cdn.jsdelivr.net/npm/@egjs/infinitegrid/dist/infinitegrid.min.js',
    buttonText: '加载更多'
  },
  isPhotoFigcaption: false,
  islazyload: false,
  isAnchor: false,
  percent: {
    toc: true,
    rightside: false,
  },
  autoDarkmode: false
}</script><script id="config-diff">var GLOBAL_CONFIG_SITE = {
  title: 'lambda表达式与Stream流',
  isPost: true,
  isHome: false,
  isHighlightShrink: false,
  isToc: true,
  isShuoshuo: false
}</script><!-- hexo injector head_end start --><link rel="stylesheet" href="https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css" media="defer" onload="this.media='all'"><link rel="stylesheet" href="https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css" media="defer" onload="this.media='all'"><script src="https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js"></script><!-- hexo injector head_end end --><meta name="generator" content="Hexo 7.3.0"></head><body><div class="post" id="body-wrap"><header class="post-bg" id="page-header" style="background-image: url(https://img.yww52.com/2021/12/2021-12-6top_img.jpg);"><nav id="nav"><span id="blog-info"><a class="nav-site-title" href="/"><span class="site-name">yww</span></a><a class="nav-page-title" href="/"><span class="site-name">lambda表达式与Stream流</span></a></span><div id="menus"></div></nav><div id="post-info"><h1 class="post-title">lambda表达式与Stream流</h1><div id="post-meta"><div class="meta-firstline"><span class="post-meta-date"><i class="far fa-calendar-alt fa-fw post-meta-icon"></i><span class="post-meta-label">发表于</span><time class="post-meta-date-created" datetime="2021-12-05T16:00:00.000Z" title="发表于 2021-12-06 00:00:00">2021-12-06</time><span class="post-meta-separator">|</span><i class="fas fa-history fa-fw post-meta-icon"></i><span class="post-meta-label">更新于</span><time class="post-meta-date-updated" datetime="2025-07-18T09:57:30.191Z" title="更新于 2025-07-18 17:57:30">2025-07-18</time></span><span class="post-meta-categories"><span class="post-meta-separator">|</span><i class="fas fa-inbox fa-fw post-meta-icon"></i><a class="post-meta-categories" href="/categories/Java/">Java</a></span></div><div class="meta-secondline"><span class="post-meta-separator">|</span><span class="post-meta-pv-cv" id="" data-flag-title=""><i class="far fa-eye fa-fw post-meta-icon"></i><span class="post-meta-label">浏览量:</span><span id="busuanzi_value_page_pv"><i class="fa-solid fa-spinner fa-spin"></i></span></span></div></div></div></header><main class="layout" id="content-inner"><div id="post"><article class="container post-content" id="article-container"><h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>Lambda表达式出现主要是为了简化代码，若某一个接口只有一个抽象方法，就能使用Lambda表达式来进行简化这个接口的实现类。</p>
<h2 id="Lambda表达式的六种情况"><a href="#Lambda表达式的六种情况" class="headerlink" title="Lambda表达式的六种情况"></a>Lambda表达式的六种情况</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 无参，无返回值</span></span><br><span class="line">      <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">      <span class="comment">// 2 一个参数，无返回值</span></span><br><span class="line">      Consumer&lt;String&gt; con = (String s) -&gt; &#123;</span><br><span class="line">          System.out.println(s);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 3 数据类型可以省略，编译器有类型推断</span></span><br><span class="line">      Consumer&lt;String&gt; con1 = (s) -&gt; &#123;</span><br><span class="line">          System.out.println(s);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 4 若只需要一个参数，小括号能省略</span></span><br><span class="line">      Consumer&lt;String&gt; con2 = s -&gt; &#123;</span><br><span class="line">          System.out.println(s);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 5 需要两个或以上的参数，可以有返回值,不只有一条语句</span></span><br><span class="line">      Comparator&lt;Integer&gt; com1 = (o1, o2) -&gt; &#123;</span><br><span class="line">          System.out.println(o1);</span><br><span class="line">          System.out.println(o2);</span><br><span class="line">          <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 6 Lambda体只有一条语句，大括号能省略，return也可以省略</span></span><br><span class="line">      Consumer&lt;String&gt; con3 = s -&gt; System.out.println(s);</span><br></pre></td></tr></table></figure>
<h2 id="Java内置的四大核心函数式接口"><a href="#Java内置的四大核心函数式接口" class="headerlink" title="Java内置的四大核心函数式接口"></a>Java内置的四大核心函数式接口</h2><ol>
<li><p><code>Consumer&lt;T&gt;</code></p>
<p>消费型接口   对T进行操作,不返回结果，方法为 <code>void accept(T t)</code></p>
</li>
<li><p><code>Supplier&lt;T&gt;</code></p>
<p>供给型接口   不接收参数，返回类型T的数据，方法为  <code>T get()</code></p>
</li>
<li><p><code>Function&lt;T,R&gt;</code></p>
<p>函数型接口   对类型为T的对象操作，返回R类型的数据，方法为 <code>R apply(T t)</code></p>
</li>
<li><p><code>Predicate&lt;T&gt;</code></p>
<p>断定型接口   对类型T的数据进行判断，返回Boolean值，方法为 <code>boolean test(T t)</code></p>
</li>
</ol>
<h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>在lambda体中引用另一个方法，即用另一个方法来实现lambda体。</p>
<p>使用格式     <code>类（或对象）:: 方法名</code></p>
<ol>
<li>对象::非静态方法</li>
<li>类::静态方法</li>
<li>类::非静态方法</li>
</ol>
<p>方法引用的方法的形参列表和返回类型要与lambda一样才能使用该方法引用（针对于前两种格式）</p>
<p>主要是第三种格式有些难懂。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如   Comparator 中的int compare(T1 t1, T2 t2)</span></span><br><span class="line"><span class="comment">// String中的int t1.compareTo(t2)</span></span><br><span class="line"><span class="comment">// 这种就是形参列表不一样，但是是由t1来调用一个t2参数的方法，所以就可以用第三种格式</span></span><br><span class="line"><span class="comment">// t1作为方法的调用者，t2作为形参</span></span><br><span class="line">String::compareTo</span><br></pre></td></tr></table></figure>
<h2 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h2><p>相当于lambda引用中创建一个对象，调用了一个构造方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lambda表达式写法</span></span><br><span class="line">Supplier&lt;String&gt; str = s -&gt; <span class="keyword">new</span> <span class="title class_">String</span>(s);</span><br><span class="line"><span class="comment">// 构造器引用的写法</span></span><br><span class="line">Supplier&lt;String&gt; str = String::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure>
<h1 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h1><p>Stream流的使用主要分为三个步骤。</p>
<ol>
<li>创建Stream流。从数据源（集合，数组等）转换成Stream流。</li>
<li>中间操作。对数据源的数据进行处理。</li>
<li>终止操作。执行终止操作，就会执行中间操作的处理，产生结果。</li>
</ol>
<h2 id="创建Stream流"><a href="#创建Stream流" class="headerlink" title="创建Stream流"></a>创建Stream流</h2><ol>
<li>集合获取Stream流的方法<ul>
<li><code>list.stream()</code>串行</li>
<li><code>list.paralleStream()</code> 并行</li>
</ul>
</li>
<li>数组获取Stream流的方法<ul>
<li>通过Arrays的静态方法stream()得到Stream流<code>Arrays.stream(int[])</code></li>
</ul>
</li>
<li>通过<code>Stream.of()</code>来获取Stream流</li>
<li>创建无限流（用于编造数据）<ul>
<li><code>Stream.iterate()</code></li>
<li><code>Stream.generate()</code></li>
</ul>
</li>
</ol>
<h2 id="Stream流的中间操作"><a href="#Stream流的中间操作" class="headerlink" title="Stream流的中间操作"></a>Stream流的中间操作</h2><ol>
<li><p>筛选与切片</p>
<ul>
<li><p><code>filter(Predicate p)</code></p>
<p>从流中排除某些元素，即满足Predicate函数的元素</p>
</li>
<li><p><code>limit(n)</code></p>
<p>截断流，使其元素不超过给定的元素，即筛选出来的元素不超过n</p>
</li>
<li><p><code>skip(n)</code></p>
<p>跳过元素，返回一个除了前n个数据的流，若数据源不足n个，则返回空流</p>
</li>
<li><p><code>distinct()</code></p>
<p>通过流生成元素的hashCode和equals方法去除重复的元素</p>
</li>
</ul>
</li>
<li><p>映射</p>
<ul>
<li><p><code>map(Function f)</code></p>
<p>接收一个函数作为参数，将元素转换成其他形式或提取信息</p>
</li>
<li><p><code>flatMap(Function f)</code></p>
<p>将一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</p>
</li>
</ul>
</li>
<li><p>排序</p>
<ul>
<li><p><code>sorted()</code></p>
<p>没有参数，自然排序，默认从小到大的排序,如果操作的元素是类，就会抛出异常，需要该类实现Comparable接口</p>
</li>
<li><p><code>sorted(Comparator com)</code></p>
<p>一个Comparator实例，定制排序</p>
</li>
</ul>
</li>
</ol>
<h2 id="Stream流的终止操作"><a href="#Stream流的终止操作" class="headerlink" title="Stream流的终止操作"></a>Stream流的终止操作</h2><ol>
<li><p>匹配与查找</p>
<ul>
<li><p><code>boolean allMatch(Predicate p)</code></p>
<p>检查是否所有元素是否匹配该断定函数接口</p>
</li>
<li><p><code>boolean anyMatch(Predicate p)</code>  </p>
<p>检查是否至少有一个元素匹配该断定函数接口</p>
</li>
<li><p><code>boolean noneMatch(Predicate p)</code> </p>
<p>检查是否没有元素匹配该断定函数接口</p>
</li>
<li><p><code>findFirst()</code></p>
<p>返回第一个元素</p>
</li>
<li><p><code>findAny()</code></p>
<p>返回任意一个元素</p>
</li>
<li><p><code>count()</code></p>
<p>返回流中的总个数</p>
</li>
<li><p><code>max(Comparator c)</code></p>
<p>返回流中的最大值</p>
</li>
<li><p><code>min(Comparator c)</code></p>
<p>返回流中的最小值</p>
</li>
<li><p><code>forEach(Consumer c)</code></p>
<p>内部迭代</p>
</li>
</ul>
</li>
<li><p>归约</p>
<ul>
<li><p><code>reduce(T identity, BinaryOperator&lt;T&gt; bin)</code></p>
<p>可以将流中元素反复结合起来得到一个值，返回这个T类型的值</p>
<p>比如这个求和的例子<code>list.stream.reduce(0, Integer::sum);</code></p>
</li>
<li><p><code>reduce(BinaryOperator&lt;T&gt; bin)</code></p>
<p>可以将流中元素反复结合起来得到一个值，返回这个<code>Optional&lt;T&gt;</code>类型的值</p>
</li>
</ul>
</li>
<li><p>收集</p>
</li>
</ol>
<p><code>collect(Collector c)</code></p>
<p>将流转换为其他形式的数据源,调用这个Collector接口的方法得到新建数据源</p>
<p>一般使用实现了接口的Collectors的类的方法</p>
<p>常用方法为</p>
<ul>
<li><p><code>List&lt;T&gt; toList()</code> </p>
<p>将元素收集到创建的List</p>
</li>
<li><p><code>Set&lt;t&gt; toSet()</code></p>
<p>将元素收集到创建的Set</p>
</li>
<li><p><code>Collection&lt;T&gt; toCollection()</code></p>
<p>将元素收集到创建的Collection</p>
</li>
<li><p><code>Long counting()</code></p>
<p>计算流中的个数</p>
</li>
<li><p><code>Integer summingInt()</code></p>
<p>对流中元素的整数属性求和</p>
</li>
<li><p><code>Double averagingInt()</code></p>
<p>求流中的元素Integer属性的平均值</p>
</li>
</ul>
<h1 id="Optional容器类"><a href="#Optional容器类" class="headerlink" title="Optional容器类"></a>Optional容器类</h1><p><code>Optional&lt;T&gt;</code>类是一个容器类，可以报错类型T的值，代表这个值存在。</p>
<p>或者仅仅保存null,表示这个值不存在，可以避免空指针异常</p>
<p>如果值存在，则isPresent()方法返回true,调用get()方法会返回该对象</p>
<h2 id="创建Optional类对象的方法"><a href="#创建Optional类对象的方法" class="headerlink" title="创建Optional类对象的方法"></a>创建Optional类对象的方法</h2><ol>
<li><p><code>Optional.of(T t)</code></p>
<p>创建一个实例，t是非空的</p>
</li>
<li><p><code>Optional.isEmpty()</code></p>
<p>创建一个空的实例</p>
</li>
<li><p><code>Optional.ofNullable(T t)</code></p>
<p>创建一个实例，t是可以空的</p>
</li>
</ol>
<h2 id="判断Optional中是否包含对象"><a href="#判断Optional中是否包含对象" class="headerlink" title="判断Optional中是否包含对象"></a>判断Optional中是否包含对象</h2><ol>
<li><p><code>boolean isPresent()</code></p>
<p>判断是否包含对象</p>
</li>
<li><p><code>void ifPresent(Consumer&lt;? super T&gt; consumer)</code></p>
<p>如果有值就会执行Consumer接口的实现代码，并且会作为参数传给它</p>
</li>
</ol>
<h2 id="获取Optional容器的对象"><a href="#获取Optional容器的对象" class="headerlink" title="获取Optional容器的对象"></a>获取Optional容器的对象</h2><ol>
<li><p><code>T get()</code></p>
<p>如果调用对象包含值，则返回该值，否则抛异常</p>
</li>
<li><p><code>T orElse(T other)</code></p>
<p>如果有值则返回，没有返回指定的other值</p>
</li>
<li><p><code>T orElseGet(Supplier&lt;? extends T&gt; other)</code></p>
<p>如果有值就将其返回，否则返回由Supplier接口实现提供的对象</p>
</li>
<li><p><code>T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</code></p>
<p>如果有值就将其返回，否则抛出由Supplier接口实现提供的异常</p>
</li>
</ol>
</article><div class="post-copyright"><div class="post-copyright__author"><span class="post-copyright-meta"><i class="fas fa-circle-user fa-fw"></i>文章作者: </span><span class="post-copyright-info"><a href="https://yww52.com">yww</a></span></div><div class="post-copyright__type"><span class="post-copyright-meta"><i class="fas fa-square-arrow-up-right fa-fw"></i>文章链接: </span><span class="post-copyright-info"><a href="https://yww52.com/posts/8a8aa27b">https://yww52.com/posts/8a8aa27b</a></span></div><div class="post-copyright__notice"><span class="post-copyright-meta"><i class="fas fa-circle-exclamation fa-fw"></i>版权声明: </span><span class="post-copyright-info">本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="external nofollow noreferrer" target="_blank">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来源 <a href="https://yww52.com" target="_blank">yww</a>！</span></div></div><div class="tag_share"><div class="post-share"><div class="social-share" data-image="https://img.yww52.com/2021/12/2021-12-6top_img.jpg" data-sites="facebook,twitter,wechat,weibo,qq"></div><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/butterfly-extsrc/sharejs/dist/css/share.min.css" media="print" onload="this.media='all'"><script src="https://cdn.jsdelivr.net/npm/butterfly-extsrc/sharejs/dist/js/social-share.min.js" defer></script></div></div><nav class="pagination-post" id="pagination"><a class="pagination-related" href="/posts/96a41905" title="SpringCloud"><img class="cover" src="https://img.yww52.com/2021/12/2021-12-17top_img.jpg" onerror="onerror=null;src='/img/404.jpg'" alt="cover of previous post"><div class="info"><div class="info-1"><div class="info-item-1">上一篇</div><div class="info-item-2">SpringCloud</div></div><div class="info-2"><div class="info-item-1">服务注册中心Eureka（停更）Eureka是Netflix开发的一个服务发现框架，SpringCloud将它集成在其子项目spring-cloud-netflix中，主要的功能是服务注册和服务发现。 Eureka有两个组件，对应了两个角色。服务中心和服务的客户端。 Eureka Server引入依赖。 1234&lt;dependency&gt;       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;       &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;   &lt;/dependency&gt; 编写配置文件。 123456789101112eureka:  instance:    # eureka服务端的实例名称    hostname: localhost:7001  client:    # false表示不向注册中心注册自己这个微服务   ...</div></div></div></a><a class="pagination-related" href="/posts/28877bf" title="异常处理"><img class="cover" src="https://img.yww52.com/2021/10/2021-10-10top_img.jpg" onerror="onerror=null;src='/img/404.jpg'" alt="cover of next post"><div class="info text-right"><div class="info-1"><div class="info-item-1">下一篇</div><div class="info-item-2">异常处理</div></div><div class="info-2"><div class="info-item-1">自定义异常类（配合结果类）12345678910111213141516171819202122232425262728/** * @author yww * @since 2021/10/9 **/@Getter@AllArgsConstructorpublic class GlobalException extends RuntimeException &#123;    /**     * 错误码     */    private Integer code = FAILED.getCode();    /**     * 错误信息     */    private final String message;    public GlobalException(String message) &#123;        this.message = message;    &#125;    public GlobalException(ResultCode resultCode) &#123;        this.code =...</div></div></div></a></nav></div><div class="aside-content" id="aside-content"><div class="card-widget card-info text-center"><div class="avatar-img"><img src="/img/butterfly-icon.png" onerror="this.onerror=null;this.src='/img/friend_404.gif'" alt="avatar"/></div><div class="author-info-name">yww</div><div class="author-info-description">debug myself</div><div class="site-data"><a href="/archives/"><div class="headline">文章</div><div class="length-num">72</div></a><a href="/tags/"><div class="headline">标签</div><div class="length-num">0</div></a><a href="/categories/"><div class="headline">分类</div><div class="length-num">16</div></a></div><a id="card-info-btn" target="_blank" rel="noopener external nofollow noreferrer" href="https://github.com/xxxxxx"><i class="fab fa-github"></i><span>Follow Me</span></a></div><div class="card-widget card-announcement"><div class="item-headline"><i class="fas fa-bullhorn fa-shake"></i><span>公告</span></div><div class="announcement_content">This is my Blog</div></div><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="fas fa-stream"></i><span>目录</span><span class="toc-percentage"></span></div><div class="toc-content"><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F"><span class="toc-number">1.</span> <span class="toc-text">Lambda表达式</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%85%AD%E7%A7%8D%E6%83%85%E5%86%B5"><span class="toc-number">1.1.</span> <span class="toc-text">Lambda表达式的六种情况</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#Java%E5%86%85%E7%BD%AE%E7%9A%84%E5%9B%9B%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3"><span class="toc-number">1.2.</span> <span class="toc-text">Java内置的四大核心函数式接口</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8"><span class="toc-number">1.3.</span> <span class="toc-text">方法引用</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%9E%84%E9%80%A0%E5%99%A8%E5%BC%95%E7%94%A8"><span class="toc-number">1.4.</span> <span class="toc-text">构造器引用</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#Stream%E6%B5%81"><span class="toc-number">2.</span> <span class="toc-text">Stream流</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%88%9B%E5%BB%BAStream%E6%B5%81"><span class="toc-number">2.1.</span> <span class="toc-text">创建Stream流</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#Stream%E6%B5%81%E7%9A%84%E4%B8%AD%E9%97%B4%E6%93%8D%E4%BD%9C"><span class="toc-number">2.2.</span> <span class="toc-text">Stream流的中间操作</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#Stream%E6%B5%81%E7%9A%84%E7%BB%88%E6%AD%A2%E6%93%8D%E4%BD%9C"><span class="toc-number">2.3.</span> <span class="toc-text">Stream流的终止操作</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#Optional%E5%AE%B9%E5%99%A8%E7%B1%BB"><span class="toc-number">3.</span> <span class="toc-text">Optional容器类</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%88%9B%E5%BB%BAOptional%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95"><span class="toc-number">3.1.</span> <span class="toc-text">创建Optional类对象的方法</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%88%A4%E6%96%ADOptional%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E5%AF%B9%E8%B1%A1"><span class="toc-number">3.2.</span> <span class="toc-text">判断Optional中是否包含对象</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%8E%B7%E5%8F%96Optional%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AF%B9%E8%B1%A1"><span class="toc-number">3.3.</span> <span class="toc-text">获取Optional容器的对象</span></a></li></ol></li></ol></div></div><div class="card-widget card-recent-post"><div class="item-headline"><i class="fas fa-history"></i><span>最新文章</span></div><div class="aside-list"><div class="aside-list-item"><a class="thumbnail" href="/posts/91f4854c" title="Java图片处理"><img src="https://img.yww52.com/2023/4/2023-4-18top_img.jpg" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="Java图片处理"/></a><div class="content"><a class="title" href="/posts/91f4854c" title="Java图片处理">Java图片处理</a><time datetime="2023-04-17T16:00:00.000Z" title="发表于 2023-04-18 00:00:00">2023-04-18</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/posts/58d09dd7" title="开发环境配置"><img src="https://img.yww52.com/2023/4/2023-4-11top_img.jpg" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="开发环境配置"/></a><div class="content"><a class="title" href="/posts/58d09dd7" title="开发环境配置">开发环境配置</a><time datetime="2023-04-10T16:00:00.000Z" title="发表于 2023-04-11 00:00:00">2023-04-11</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/posts/4e5ad84e" title="MybatisPlus常用方法"><img src="https://img.yww52.com/2023/2/2023-2-2top_img.jpg" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="MybatisPlus常用方法"/></a><div class="content"><a class="title" href="/posts/4e5ad84e" title="MybatisPlus常用方法">MybatisPlus常用方法</a><time datetime="2023-02-01T16:00:00.000Z" title="发表于 2023-02-02 00:00:00">2023-02-02</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/posts/622a5765" title="2022年度总结"><img src="https://img.yww52.com/2023/1/2023-1-1/top_img.jpg" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="2022年度总结"/></a><div class="content"><a class="title" href="/posts/622a5765" title="2022年度总结">2022年度总结</a><time datetime="2022-12-31T16:00:00.000Z" title="发表于 2023-01-01 00:00:00">2023-01-01</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/posts/e31003e0" title="SpringBoot部署启动"><img src="https://img.yww52.com/2022/09/2022-9-28top_img.jpg" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="SpringBoot部署启动"/></a><div class="content"><a class="title" href="/posts/e31003e0" title="SpringBoot部署启动">SpringBoot部署启动</a><time datetime="2022-09-27T16:00:00.000Z" title="发表于 2022-09-28 00:00:00">2022-09-28</time></div></div></div></div></div></div></main><footer id="footer"><div id="footer-wrap"><div class="copyright">&copy;2019 - 2025 By yww</div><div class="framework-info"><span>框架 </span><a target="_blank" rel="noopener external nofollow noreferrer" href="https://hexo.io">Hexo</a><span class="footer-separator">|</span><span>主题 </span><a target="_blank" rel="noopener external nofollow noreferrer" href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a></div></div></footer></div><div id="rightside"><div id="rightside-config-hide"><button id="readmode" type="button" title="阅读模式"><i class="fas fa-book-open"></i></button><button id="darkmode" type="button" title="日间和夜间模式切换"><i class="fas fa-adjust"></i></button><button id="hide-aside-btn" type="button" title="单栏和双栏切换"><i class="fas fa-arrows-alt-h"></i></button></div><div id="rightside-config-show"><button id="rightside-config" type="button" title="设置"><i class="fas fa-cog fa-spin"></i></button><button class="close" id="mobile-toc-button" type="button" title="目录"><i class="fas fa-list-ul"></i></button><button id="go-up" type="button" title="回到顶部"><span class="scroll-percent"></span><i class="fas fa-arrow-up"></i></button></div></div><div><script src="/js/utils.js"></script><script src="/js/main.js"></script><div class="js-pjax"></div><script async data-pjax src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script></div><!-- hexo injector body_end start --><script async src="//at.alicdn.com/t/font_2032782_8d5kxvn09md.js"></script><script data-pjax src="/live2d-models/index.min.js"></script><script>const oml2d = OML2D.loadOml2d({dockedPosition:"left",mobileDisplay:false,parentElement:document.body,primaryColor:"#d0c3fc",sayHello:true,models:[{"path":["/live2d-models/慕鸾/86.model3.json","/live2d-models/慕鸾婚服/116.model3.json","/live2d-models/小天使/qc.model3.json"],"name":"慕鸾","position":[-70,0],"scale":0.09,"stageStyle":{"width":250,"height":250},"mobilePosition":[-10,23],"mobileScale":0.1,"mobileStageStyle":{"width":180,"height":166},"motionPreloadStrategy":"ALL"}],menus:{disable:false},tips:{style: {"width":200,"height":110,"left":"calc(50% - 20px)","top":"-100px"},mobileStyle: {"width":180,"height":80,"left":"calc(50% - 30px)","top":"-100px"},idleTips:{interval:15000,message:["你好呀~","欢迎来到我的小站~"]}},statusBar:{"disable":false}});</script><!-- hexo injector body_end end --></body></html>